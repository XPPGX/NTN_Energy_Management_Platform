@page "/"

@rendermode InteractiveServer

@using demoVer.Components.Layout
@using demoVer.Models
@using System
@using System.IO
@using System.Text.Json

@inject IJSRuntime JS
@inject IDialogService DialogService

<PageTitle>NTN module</PageTitle>

<TopRow OnSendToParent="ReceiveFrom_TopRow"
        InformParentTo_OpenAddCard="ReceiveFrom_TopRow_OpenAddCard"
        InformParentTo_SaveCardsInfo="ReceiveFrom_TopRow_SaveCardsInfo"
        @ref="refChild_TopRow"/>

<!-- Independent of the HOME arrangement-->
@if(!string.IsNullOrEmpty(AlertMessage))
{
    <div class="custom-alert">
        <div class="custom-alert-row">
            <span class="alert-text">⚠️ @AlertMessage</span>
        </div>
        
        <div class="custom-btn-col">
            <MudButton OnClick="ConfirmDelete"
                    Variant="Variant.Filled"
                    Style="background-color: #f8d7da; color: #721c24; border: 1px solid #e2aeb2; margin: 4px;">
                確定
            </MudButton>

            <MudButton OnClick="CancelDelete"
                    Variant="Variant.Outlined"
                    Style="background-color: #fefefe; color: #333333; border: 1px solid #e0e0e0; margin: 4px;">
                取消
            </MudButton>
        </div>
        
    </div>
}

@if(modal_IsOpen)
{
    <div class="modal-overlay" @onclick="CloseModal">
        @if(editMenu_IsOpen)
        {
            <div class="custom-dialog" @onclick:stopPropagation>
                <MudStack Spacing="2" AlignItems="AlignItems.Center" Class="p-4">
                    <MudText Typo="Typo.h5" Class="mb-4">卡片管理</MudText>

                    <MudButton Color="Color.Primary" Variant="Variant.Filled"
                            OnClick="OpenEditCard"
                            StartIcon="@Icons.Material.Filled.Edit" Style="width: 100%;">
                        編輯卡片
                    </MudButton>

                    <MudButton Color="Color.Error" Variant="Variant.Filled"
                            OnClick="DeleteCard"
                            StartIcon="@Icons.Material.Filled.Delete" Style="width: 100%;">
                        刪除卡片
                    </MudButton>
                </MudStack>
            </div>
                    
            @* <div class="modal-content" @onclick:stopPropagation>
                <h3>卡片管理</h3>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenEditCard" StartIcon="@Icons.Material.Filled.Edit">
                    編輯卡片
                </MudButton>

                <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="DeleteCard" StartIcon="@Icons.Material.Filled.Delete">
                    刪除卡片
                </MudButton>
            </div> *@
        }
        else if(addSelection_IsOpen)
        {
            <div class="modal-content" @onclick:stopPropagation>
                <h3>選擇卡片</h3>
                <div class="selection-group">
                    <div class="addCard-selection-img-label-col" type="button" @onclick="() => addCard(CardType.Info)">
                        <img src="images/cardSelection-info.png" alt="plus" class="addCard-selection-img"/>
                        <div class="addCard-selection-label">資訊</div>
                    </div>
                    <div class="addCard-selection-img-label-col" type="button">
                        <img src="images/cardSelection-chart.png" alt="plus" class="addCard-selection-img"/>
                        <div class="addCard-selection-label">圖表</div>
                    </div>
                    <div class="addCard-selection-img-label-col" type="button">
                        <img src="images/cardSelection-status.png" alt="plus" class="addCard-selection-img"/>
                        <div class="addCard-selection-label">連接狀態</div>
                    </div>
                </div>
            </div>
        }
        
        @if(editCard_IsOpen)
        {
            <div class="modal-content-edit" @onclick:stopPropagation>
                @{
                    var targetCard = CardInfos.Find(c => c.ID == editingCard_ID);
                    Console.WriteLine(targetCard);
                    Console.WriteLine("OpenEditCard");
                    if(targetCard != null)
                    {
                        @((RenderFragment)(builder => {
                            builder.OpenComponent(0, typeof(EditCard)); //Create Card

                            //Parameters passed into each card(razor component)
                            builder.AddAttribute(1, "currentCardInfo", targetCard);
                            builder.AddAttribute(2, "OnCardInfoUpdated", EventCallback.Factory.Create<CardInfo>(this, HandleCardUpdate));
                            builder.CloseComponent();
                        }));

                    }
                    else
                    {
                        Console.WriteLine("targetCard == NULL");
                    }
                }
            </div>
        }
    </div>
}
<!---------------------------------------->


<div class="column-container" @onclick="HandleGlobalClick">
    <div class="row1-container">
        <div class="row1-leftPart">
            Inverter OFF/ON：
            <label class="switch">
                <input type="checkbox" checked>
                <span class="slider"></span>
            </label>
        </div>

        <div class="row1-rightPart">
            Model Name：
            <div class="highlighted-content">
                NTN-5K-248
            </div>
        </div>
    </div>
    
    <div id="sortable-modules" class="module-grid" @ref="ref_module_container">
        @foreach(var card in CardInfos)
        {
            Type componentType_Temp = null;
            switch(card.card_Type)
            {
                case CardType.Info:
                    componentType_Temp = typeof(BlankInfoCard);
                    break;
                case CardType.Chart:

                    break;
                case CardType.Status:

                    break;
                default:
                    componentType_Temp = null;
                    break;
            }

            if(componentType_Temp == null){continue;}

            //style="resize: horizontal; overflow: auto" //卡片可以調整寬度
            <div class="module-wrapper @card.widthClass" cardID_ForSorting="@card.ID" draggable="@showEditBtn_Flag" >
                @((RenderFragment)(builder => {
                    builder.OpenComponent(0, componentType_Temp); //Create Card

                    //Parameters passed into each card(razor component)
                    builder.AddAttribute(1, "CssClass", "module-card"); 
                    builder.AddAttribute(2, "showEditButton", showEditBtn_Flag);
                    builder.AddAttribute(3, "Inform_Home_openEditMenu",
                        EventCallback.Factory.Create<string>(this, Handle_Inform_Home_openEditMenu));
                    builder.AddAttribute(4, "currentCard", card);

                    builder.CloseComponent();
                }))
                
            </div>

            //store information in CardInfos
            //card.showSequence = cardRenderCounter;
            //cardRenderCounter++;
        }
    </div>
</div>


@code
{

    //UI control code
    private bool showEditBtn_Flag       = false;
    private bool addSelection_IsOpen    = false;
    private bool modal_IsOpen           = false;
    private bool editMenu_IsOpen        = false;
    private bool afterAddCard_Flag      = false;
    private bool editCard_IsOpen        = false;
    private string editingCard_ID     = "";
    private string AlertMessage         = "";
    private byte cardRenderCounter      = 0;
    private TopRow refChild_TopRow;

    private ElementReference ref_module_container;

    @* public const int CARD_TYPE_INFO = 1;
    public const int CARD_TYPE_CHART = 2;
    public const int CARD_TYPE_STATUS = 3; *@

    @* public class CardInfo
    {
        public string ID {get; set;}                                        //識別用的ID(string)
        public int card_Type;                                        
        public string widthClass {get; set;}                                //定義的寬度(w25 | w50)
        public Type ComponentType {get; set;}                               //razor的元件類型(名稱)

        //public LayoutComponentBase ComponentRef {get; set;}                 //存Ref，之後可用這個在C#控制這些child razor元件
        public byte showSequence {get; set;}                                //存被渲染的順序 start from 0
        //public Dictionary<string, object> Parameters {get; set;} = new();   //傳入每個card的參數
    }
     *@
    

    public List<CardInfo> CardInfos = new ()
    {
        @* new CardInfo
        {
            //ID = $"OverviewCard-{Guid.NewGuid().ToString("N").Substring(0,8)}",
            ID = "OverviewCard",
            widthClass = "w25",
            // ComponentType = typeof(OverviewCard),
            card_Type = CardType.Info,
            showSequence = 0,
        },
        new CardInfo
        {
            ID = "RunningDiagramCard",
            widthClass = "w50",
            card_Type = CardType.Status,
            // ComponentType = typeof(RunningDiagramCard),
            showSequence = 1,
        },
        new CardInfo
        {
            ID = "StatisticsCard",
            widthClass = "w25",
            card_Type = CardType.Info,
            // ComponentType = typeof(StatisticsCard),
            showSequence = 2,
        },
        new CardInfo
        {
            ID = "WattDiagram",
            widthClass = "w50",
            card_Type = CardType.Chart,
            // ComponentType = typeof(WattDiagram),
            showSequence = 3,
        },
        new CardInfo
        {
            ID = "BatteryChart",
            widthClass = "w50",
            card_Type = CardType.Chart,
            // ComponentType = typeof(BatteryChart),
            showSequence = 4,
        } *@
    };

    #region Render_Flow_Control
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {//用這個function要搭配  @rendermode InteractiveServer 放在檔案開頭
    
        if (firstRender)
        {   
            Console.WriteLine("First Render");
            try{
                //[Debug] try drag function
                // var dotNetRef = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("initSortable", showEditBtn_Flag);
                await JS.InvokeVoidAsync("DotNetHelperRegister", DotNetObjectReference.Create(this));
                await JS.InvokeVoidAsync("getCardOrder");
                //await JS.InvokeVoidAsync("sortableHelper.initSortable", showEditBtn_Flag);
            }
            catch(Exception ex)
            {
                Console.WriteLine("Error : " + ex.Message);
            }
        }
        
        //每次StateHasChanged()重新渲染後，會執行以下
        if(afterAddCard_Flag)
        {
            ScrollToBottomAsync();
            afterAddCard_Flag = false;
        }


        //[Only for Debug]
        @* Console.WriteLine("===[NEW]===");
        foreach (var card in CardInfos)
        {
            foreach (var prop in card.GetType().GetProperties())
            {
                Console.WriteLine($"{prop.Name} = {prop.GetValue(card)}");
            }
            Console.WriteLine("------");
        } *@
    }

    //UI重新Render前會做這個
    protected override bool ShouldRender()
    {
        cardRenderCounter = 0;
        Console.WriteLine(cardRenderCounter);
        return true;
    }
    #endregion //Render_Flow_Control

    [JSInvokable] public void UpdateCardOrderFromJS(List<string> newOrder)
    {
        Console.WriteLine("New card order received : ");
        byte counter = 0;
        foreach(var id in newOrder)
        {
            Console.WriteLine(id);
            var targetCard = CardInfos.Find(c => c.ID == id);
            if(targetCard != null)
            {
                targetCard.showSequence = counter;
                counter ++;
            }
            else
            {
                Console.WriteLine("targetCard == NULL");
            }
        }

        Console.WriteLine("=== [AFTER UPDATE] ===");
        foreach (var card in CardInfos)
        {
            Console.WriteLine($"Card {card.ID} => showSequence: {card.showSequence}");
        }
        CardInfos = CardInfos.OrderBy(c => c.showSequence).ToList();
    }

    private async Task ReceiveFrom_TopRow(bool _FromTopRow_showEditBtn_Flag)
    {
        showEditBtn_Flag = _FromTopRow_showEditBtn_Flag;
        await JS.InvokeVoidAsync("initSortable", showEditBtn_Flag); //enable or disable sortableJS
    }

    private async Task ReceiveFrom_TopRow_OpenAddCard()
    {
        modal_IsOpen = true;
        addSelection_IsOpen = true;
        Console.WriteLine("TETSTSETSETSETSETSET");
    }

    private async Task ReceiveFrom_TopRow_SaveCardsInfo()
    {
        string jsonString = JsonSerializer.Serialize(CardInfos, new JsonSerializerOptions { WriteIndented = true });

        File.WriteAllText("visibleCards.json", jsonString);

        Console.WriteLine("JSON 檔案已寫入完成。");
    }

    private void Handle_Inform_Home_openEditMenu(string _editingCard_ID_FromChild)
    {
        editingCard_ID = _editingCard_ID_FromChild;
        modal_IsOpen = true;
        editMenu_IsOpen = true;
        Console.WriteLine("Current edit Card (from Home) : " + _editingCard_ID_FromChild);
    }

    private void CloseModal()
    {   
        //close modal
        modal_IsOpen = false;
        //Reset editingCard_ID
        editingCard_ID = "";
        //close EditMenu
        editMenu_IsOpen = false;
        //Close Alert
        AlertMessage = null;
        //Close addSelection_IsOpen
        addSelection_IsOpen = false;
        //Close editCard_IsOpen
        editCard_IsOpen = false;

    }

    private void OpenEditCard()
    {
        editMenu_IsOpen = false;
        editCard_IsOpen = true;
        Console.WriteLine("[Func] OpenEditCard");
    }

    private void DeleteCard()
    {
        if(editingCard_ID == "")
        {
            Console.WriteLine("Current editing card is empty");
            return;
        }
        
        var targetCard = CardInfos.Find(c => c.ID == editingCard_ID);
        if(targetCard != null)
        {
            //show alert
            editMenu_IsOpen = false;
            TriggerAlert("警告 : 刪除後無法復原");
          
            
            // StateHasChanged();
            
        }
    }

    private void TriggerAlert(string _alertMessage_FromOtherFunc)
    {
        AlertMessage = _alertMessage_FromOtherFunc;
    }

    private void ConfirmDelete()
    {
        var targetCard = CardInfos.Find(c => c.ID == editingCard_ID);
        if(targetCard != null)
        {
            CardInfos.Remove(targetCard);
            StateHasChanged();
        }
        CloseAlert();
        CloseModal();
    }

    private void CancelDelete()
    {
        CloseAlert();
        CloseModal();
    }

    private void CloseAlert()
    {
        AlertMessage = null;
    }

    private void HandleGlobalClick()
    {
        
        refChild_TopRow?.HideMenu();
    }

    private void addCard(CardType _selection)
    {
        switch(_selection)
        {
            case CardType.Info: //infoCard
                var newCard = new CardInfo
                {
                    ID = Guid.NewGuid().ToString("N"), //生成隨機32碼 GUID
                    widthClass = "w25",
                    card_Type = CardType.Info,
                    showSequence = (byte)(CardInfos.Count),
                    cardName = "FAKER",
                };
                CardInfos.Add(newCard);
                afterAddCard_Flag = true;
                StateHasChanged();
                CloseModal();
                break;
            case CardType.Chart: //chart
                break;
            case CardType.Status: //status
                break;
            default:
                break;
        }
        
    }

    private async Task ScrollToBottomAsync()
    {
        Console.WriteLine("Scroll to bottom C#");
        await JS.InvokeVoidAsync("scrollToBottom");
    }

    private void HandleCardUpdate(CardInfo _updatedCard)
    {
        var index = CardInfos.FindIndex(c => c.ID == _updatedCard.ID);
        if(index != -1)
        {
            Console.WriteLine("[NTN_HOME] : Card.ID : " + _updatedCard.ID + " updated");
            CardInfos[index] = _updatedCard;
        }


        Console.WriteLine("[NTN_HOME] CardInfos: ");
        string json = JsonSerializer.Serialize(CardInfos, new JsonSerializerOptions{
            WriteIndented = true
        });
        Console.WriteLine(json);
        CloseModal();
        StateHasChanged();
    }
}