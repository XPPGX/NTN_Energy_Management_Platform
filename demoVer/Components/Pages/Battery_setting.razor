@page "/Battery_setting"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject DataCenter DataCenter
@using demoVer.Components.Layout
@using demoVer.Models
@using System.Text.Json
@using System.IO
@using demoVer.Utils

<MudPopoverProvider/>
@*Web Content*@
<PageTitle>Battery Setting</PageTitle>
<TopRow InformParentTo_ApplySetting="ReceiveFrom_TopRow_SaveBatterySetting"/>


<div class="content-container">
    <div class="card-grid">
        <div class="cell4 card-container">
            @if(Init_Flag)
            {
                <h3></h3>
                for(int i = 0 ; i < Sliders.Count ; i ++)
                {
                    var localIndex = i;
                    var slider = Sliders[i];
                    <div class="slider-wrapper">
                        <div class="vue-vertical-slider"
                            style="@(slider.Label == "FV" && !selectedStage ? "opacity: 0.5;" : "")"
                            @onmousedown="@(e => (slider.Label == "FV" && !selectedStage) ? Task.CompletedTask : OnSliderMouseDown(e, localIndex, slider.Label))"
                            @ontouchstart="@(e => (slider.Label == "FV" && !selectedStage) ? Task.CompletedTask : OnSliderTouchStart(e, localIndex, slider.Label))">
                            <div class="vue-vertical-fill" @ref="@FillRefs[localIndex]"></div>
                            <div class="vue-vertical-thumb" @ref="@ThumbRefs[localIndex]"></div>
                        </div>
                        <input type="number"
                                id="slider-input-@localIndex"
                                step="0.1"
                                min=""
                                max=""
                                class="slider-input"
                                style="text-align: center;"
                                disabled="@(slider.Label == "FV" && !selectedStage)"/>
                        @* <div class="slider-label">值: @slider.Value</div> *@
                        <label>@slider.Label</label>
                    </div>
                }
            }
        </div>
        
        <div class="cell8">
            <div class="right-part">

                <div class="card-container-stage">
                    <canvas id="stageChart" class="stage-chart"></canvas>
                    <div class="stage-controls">
                        <MudSelect T="bool" Label="選擇充電段數" Value="selectedStage" Immediate="true" Dense="true" Variant="Variant.Filled" ValueChanged="OnStageChanged">
                            <MudSelectItem Value="@(false)">2階段</MudSelectItem>
                            <MudSelectItem Value="@(true)">3階段</MudSelectItem>
                        </MudSelect>
                    </div>
                </div>
                
                <div class="card-container-timeout">
                    <div class="timeout-group">
                        <MudToggleIconButton @bind-Toggled="@(CCT_Enable)"
                            Icon="@Icons.Material.Filled.ToggleOff"
                            Color="@Color.Error"
                            ToggledIcon="@Icons.Material.Filled.ToggleOn"
                            ToggledColor="@Color.Success"
                            title="@(CCT_Enable ? "On" : "Off")"
                            IconSize="Size.Large"/>
                        @if(!isMobile)
                        {
                            <span style="display: inline-block;">CC timeout</span>
                        }
                        <div class="inputField">
                            <MudTextField @bind-Value="@CC_Timeout_value" Label="CCT" Variant="Variant.Outlined" Class="small-textField" Adornment="Adornment.End" AdornmentText="Minute"/>
                            @if(!isMobile)
                            {
                                <MudText Typo="Typo.body1">@FormatToHourMin(CC_Timeout_value)</MudText>
                            }
                            else
                            {
                                <div class="dateTime">@FormatToHourMin(CC_Timeout_value)</div>
                            }
                        </div>
                        @if(!isMobile)
                        {
                            <div class="responsive-slider">
                                <MudSlider T="int" @bind-Value="@CC_Timeout_value" ValueLabel="true" Variant="Variant.Filled"
                                        Min="0" Max="6000" Step="1" Size="Size.Large" />
                            </div>
                        }
                    </div>
                    <div class="timeout-group">
                        <MudToggleIconButton @bind-Toggled="@(CVT_Enable)"
                            Icon="@Icons.Material.Filled.ToggleOff"
                            Color="@Color.Error"
                            ToggledIcon="@Icons.Material.Filled.ToggleOn"
                            ToggledColor="@Color.Success"
                            title="@(CVT_Enable ? "On" : "Off")" />
                        @if(!isMobile)
                        {
                            <span style="display: inline-block;">CV timeout</span>
                        }
                        <div class="inputField">
                            <MudTextField @bind-Value="@CV_Timeout_value" Label="CVT" Variant="Variant.Outlined" Class="small-textField" Adornment="Adornment.End" AdornmentText="Minute"/>
                            @if(!isMobile)
                            {
                                <MudText Typo="Typo.body1">@FormatToHourMin(CV_Timeout_value)</MudText>
                            }
                            else
                            {
                                <div class="dateTime">@FormatToHourMin(CV_Timeout_value)</div>
                            }
                        </div>
                        @if(!isMobile)
                        {
                            <div class="responsive-slider">
                                <MudSlider T="int" @bind-Value="@CV_Timeout_value" ValueLabel="true" Variant="Variant.Filled"
                                        Min="0" Max="6000" Step="1" Size="Size.Large" />
                            </div>
                        }
                    </div>
                    <div class="timeout-group">
                        <MudToggleIconButton @bind-Toggled="@(FVT_Enable)"
                            Icon="@Icons.Material.Filled.ToggleOff"
                            Color="@Color.Error"
                            ToggledIcon="@Icons.Material.Filled.ToggleOn"
                            ToggledColor="@Color.Success"
                            title="@(FVT_Enable ? "On" : "Off")" />
                        @if(!isMobile)
                        {
                            <span style="display: inline-block;">FV timeout</span>
                        }
                        <div class="inputField">
                            <MudTextField @bind-Value="@FV_Timeout_value" Label="FVT" Variant="Variant.Outlined" Class="small-textField" Adornment="Adornment.End" AdornmentText="Minute"/>
                            @if(!isMobile)
                            {
                                <MudText Typo="Typo.body1">@FormatToHourMin(FV_Timeout_value)</MudText>
                            }
                            else
                            {   
                                <div class="dateTime">@FormatToHourMin(FV_Timeout_value)</div>
                            }
                        </div>
                        @if(!isMobile)
                        {
                            <div class="responsive-slider">
                                <MudSlider T="int" @bind-Value="@FV_Timeout_value" ValueLabel="true" Variant="Variant.Filled"
                                        Min="0" Max="6000" Step="1" Size="Size.Large" />
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@code
{
    private bool isMobile;
    private DotNetObjectReference<Battery_setting> dotNetRef;
    private bool Init_Flag = false;
    private List<ElementReference>  FillRefs = new();
    private List<ElementReference>  ThumbRefs = new();

    private bool[] _sliderInitFlags;
    public class SliderItem
    {
        public double Value {get; set;}
        public string Label {get; set;} = null;
    }

    public List<SliderItem> Sliders = new();
    private ElementReference FillRef;
    private ElementReference ThumbRef;

    private double rangeValue;
    public bool CCT_Enable {get; set;}
    public bool CVT_Enable {get; set;}
    public bool FVT_Enable {get; set;}
    private int CC_Timeout_value;
    private int CV_Timeout_value;
    private int FV_Timeout_value;

    private bool selectedStage;

    private string FormatToHourMin(double totalMin)
    {
        int hours = (int)(totalMin / 60);
        int minutes = (int)(totalMin % 60);
        return $"{hours} 小時 {minutes} 分";
    }

    private async Task OnStageChanged(bool value)
    {

        selectedStage = value;
        Console.WriteLine($"selectedStage = {selectedStage}");

        var config = new
        {
            canvasID = "stageChart"
        };
        await JS.InvokeVoidAsync("setStage", selectedStage);
        await JS.InvokeVoidAsync("drawChart_Stage", config);
    }



    protected override void OnInitialized()
    {
        DataCenter.Battery.OnUpdated += OnBatteryChanged;
        
        var newInit = new BatteryInitData();
        DataCenter.Battery.UpdateFrom(newInit);
        float testFloat = 1.2f;
        Console.WriteLine($"testFloat = {testFloat}");
        Sliders = new List<SliderItem>
        {
            //index = 0
            new SliderItem { Label = "CC", Value = DataCenter.Battery.CC_Display},
            //index = 1
            new SliderItem { Label = "TC", Value = DataCenter.Battery.TC_Display},
            //index = 2
            new SliderItem { Label = "CV", Value = DataCenter.Battery.CV_Display},
            //index = 3
            new SliderItem { Label = "FV", Value = DataCenter.Battery.FV_Display}
        };
        FillRefs = new List<ElementReference>(new ElementReference[Sliders.Count]);
        ThumbRefs = new List<ElementReference>(new ElementReference[Sliders.Count]);
        
        Init_Flag = true;

        _sliderInitFlags = new bool[Sliders.Count];
        
    }

    private void OnBatteryChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        DataCenter.Battery.OnUpdated -= OnBatteryChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            Console.WriteLine($"isMobile = {isMobile}");
            dotNetRef = DotNetObjectReference.Create(this);
        
            await JS.InvokeVoidAsync("setSliderBars_Info", new{
                cc_val = DataCenter.Battery.CC_Display,
                cc_controlMax = DataCenter.Battery.CC_Max_Display,
                cc_minValue = DataCenter.Battery.CC_Min_Display,
                cc_fill = FillRefs[0],
                cc_thumb = ThumbRefs[0],

                tc_val = DataCenter.Battery.TC_Display,
                tc_controlMax = DataCenter.Battery.TC_Max_Display,
                tc_minValue = DataCenter.Battery.TC_Min_Display,
                tc_fill = FillRefs[1],
                tc_thumb = ThumbRefs[1],

                cv_val = DataCenter.Battery.CV_Display,
                cv_controlMax = DataCenter.Battery.CV_Max_Display,
                cv_minValue = DataCenter.Battery.CV_Min_Display,
                cv_fill = FillRefs[2],
                cv_thumb = ThumbRefs[2],

                fv_val = DataCenter.Battery.FV_Display,
                fv_controlMax = DataCenter.Battery.CV_Max_Display,
                fv_minValue = DataCenter.Battery.FV_Min_Display,
                fv_fill = FillRefs[3],
                fv_thumb = ThumbRefs[3],
            });

            for(int i = 0 ; i < Sliders.Count ; i ++)
            {
                var slider = Sliders[i];
                var (_, max) = GetDisplaySliderRange(slider.Label);

                await JS.InvokeVoidAsync("updateSliderVisual", new{
                    fill = FillRefs[i],
                    thumb = ThumbRefs[i],
                    value = slider.Value,
                    displayMaxValue = max,
                });
            }
            
            await JS.InvokeVoidAsync("sliderUpdateFromInput", dotNetRef);

            var config = new CHART_STAGE_CONFIG
            {
                canvasID = "stageChart",
            };

            await JS.InvokeVoidAsync("setStage", 0);
            await JS.InvokeVoidAsync("drawChart_Stage", config);
            isMobile = await JS.InvokeAsync<bool>("checkIsMobile");
            if(isMobile)
            {
                StateHasChanged();
            }
        }
    }

    private async Task StartMouseDrag(MouseEventArgs e, int index, float _Min, float _displayMax)
    {
        var slider = Sliders[index];
        await JS.InvokeVoidAsync("startVerticalSliderDrag", new{
            fill = FillRefs[index],
            thumb = ThumbRefs[index],
            dotNetHelper = dotNetRef,
            index = index,
            minValue = _Min,
            displayMaxValue = _displayMax
        });
    }

    private async Task StartTouchDrag(TouchEventArgs e, int index, float _Min, float _displayMax)
    {
        var slider = Sliders[index];
        await JS.InvokeVoidAsync("startVerticalSliderDrag", new{
            fill = FillRefs[index],
            thumb = ThumbRefs[index],
            dotNetHelper = dotNetRef,
            index = index,
            minValue = _Min,
            displayMaxValue = _displayMax
        });
    }

    private async Task OnSliderInputChanged(int index)
    {
        var value = Sliders[index].Value;
        var (_, max) = GetDisplaySliderRange(Sliders[index].Label);
        await JS.InvokeVoidAsync("updateSliderVisual", new{
            fill = FillRefs[index],
            thumb = ThumbRefs[index],
            value = Sliders[index].Value,
            displayMaxValue = max,
        });
    }


    //根據拉動的某一條bar，修改UI上對應的input value數值
    [JSInvokable("UpdateSliderValue")]
    public void UpdateSliderValueFromJs(int index, double value)
    {
        @* 
        index 0 : CC
        index 1 : TC
        index 2 : CV
        index 3 : FV 
        *@

        var currentSlider = Sliders[index];
        currentSlider.Value = value;
        
        switch(currentSlider.Label)
        {
            case "CC":
                var tempSlider_CC = Sliders[index];
                break;
            case "TC":
                break;
            case "CV":
                break;
            case "FV":
                break;
            default:
                break;
        }

        StateHasChanged();
    }

    private(float min, float max) GetDisplaySliderRange(string label)
    {
        return label switch
        {
            "CC" => (DataCenter.Battery.CC_Min_Display, DataCenter.Battery.CC_Max_Display),
            "TC" => (DataCenter.Battery.TC_Min_Display, DataCenter.Battery.CC_Max_Display),
            "CV" => (DataCenter.Battery.CV_Min_Display, DataCenter.Battery.CV_Max_Display),
            "FV" => (DataCenter.Battery.FV_Min_Display, DataCenter.Battery.CV_Max_Display),
            _ => (0, 100)
        };
    }

    private async Task OnSliderMouseDown(MouseEventArgs e, int index, string label)
    {
        var (min, displayMax) = GetDisplaySliderRange(label);
        await StartMouseDrag(e, index, min, displayMax);
    }

    private async Task OnSliderTouchStart(TouchEventArgs e, int index, string label)
    {
        var (min, displayMax) = GetDisplaySliderRange(label);
        await StartTouchDrag(e, index, min, displayMax);
    }

    private void loadSetting()
    {
        @* 或許這裡也是API去拿資料 *@
    }

    private async Task ReceiveFrom_TopRow_SaveBatterySetting()
    {
        //Get CC, TC, CV, FV Data
        var sliderValues = new List<float>();
        sliderValues = (await JS.InvokeAsync<float[]>("transferSliderValue")).ToList();

        //arrange data
        var Data = new
        {
            CC_Display = sliderValues[0],
            TC_Display = sliderValues[1],
            CV_Display = sliderValues[2],
            FV_Display = sliderValues[3],
            selectedStage = selectedStage,
            CCT_Enable = CCT_Enable,
            CC_Timeout_value = CC_Timeout_value,
            CVT_Enable = CVT_Enable,
            CV_Timeout_value = CV_Timeout_value,
            FVT_Enable = FVT_Enable,
            FV_Timeout_value = FV_Timeout_value,
        };

        //save into DataCenter (for boardcast)
        DataCenter.Battery.CC_Display           = Data.CC_Display;
        DataCenter.Battery.TC_Display           = Data.TC_Display;
        DataCenter.Battery.CV_Display           = Data.CV_Display;
        DataCenter.Battery.FV_Display           = Data.FV_Display;
        DataCenter.Battery.CurveStage           = Data.selectedStage;
        DataCenter.Battery.CCT_Enable           = Data.CCT_Enable;
        DataCenter.Battery.CC_TimeOut_Display   = Data.CC_Timeout_value;
        DataCenter.Battery.CVT_Enable           = Data.CVT_Enable;
        DataCenter.Battery.CV_TimeOut_Display   = Data.CV_Timeout_value;
        DataCenter.Battery.FVT_Enable           = Data.FVT_Enable;
        DataCenter.Battery.FV_TimeOut_Display   = Data.FV_Timeout_value;

        //save as Json file (Or use API to call framework to save the setting)
         @*這裡或許要改成用API去改值就好，讓框架去下命令後保存此次設定以便下次帶入*@
        string jsonString = JsonSerializer.Serialize(Data, new JsonSerializerOptions{WriteIndented=true});
        string targetPath = AppJsonManager.Get_Writable_DataPath("LastTime_settingData.json");
        AppJsonManager.SavePartialJson(targetPath, "Battery_Setting", Data);
    }
}
