@page "/Battery_setting"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject DataCenter DataCenter
@using demoVer.Components.Layout
@using demoVer.Models

<MudPopoverProvider/>
@*Web Content*@
<PageTitle>Battery Setting</PageTitle>
<TopRow />


<div class="content-container">
    <div class="card-grid">
        <div class="cell4 card-container">
            @if(Init_Flag)
            {
                <h3></h3>
                for(int i = 0 ; i < Sliders.Count ; i ++)
                {
                    var localIndex = i;
                    var slider = Sliders[i];
                    <div class="slider-wrapper">
                        <div class="vue-vertical-slider"
                            @onmousedown="@(e => OnSliderMouseDown(e, localIndex, slider.Label))"
                            @ontouchstart="@(e => OnSliderTouchStart(e, localIndex, slider.Label))">
                            <div class="vue-vertical-fill" @ref="@FillRefs[localIndex]"></div>
                            <div class="vue-vertical-thumb" @ref="@ThumbRefs[localIndex]"></div>
                        </div>
                        <input type="number"
                                id="slider-input-@localIndex"
                                step="0.1"
                                min=""
                                max=""
                                class="slider-input"
                                style="text-align: center;"/>
                        @* <div class="slider-label">值: @slider.Value</div> *@
                        <label>@slider.Label</label>
                    </div>
                }
            }
        </div>
        
        <div class="cell8">
            <div class="right-part">

                <div class="card-container-stage">
                    <canvas id="stageChart" class="stage-chart"></canvas>
                    <div class="stage-controls">
                        <MudSelect T="string" Label="選擇充電段數" Value="selectedChartType" Immediate="true" Dense="true" Variant="Variant.Filled" ValueChanged="OnChartTypeChanged">
                            <MudSelectItem Value="@("line")">3階段</MudSelectItem>
                            <MudSelectItem Value="@("bar")">2階段</MudSelectItem>
                        </MudSelect>
                    </div>
                </div>
                
                <div class="card-container-timeout">
                    <div class="timeout-group">
                        <MudToggleIconButton @bind-Toggled="CC_Enable"
                            Icon="@Icons.Material.Filled.ToggleOff"
                            Color="@Color.Error"
                            ToggledIcon="@Icons.Material.Filled.ToggleOn"
                            ToggledColor="@Color.Success"
                            title="@(CC_Enable ? "On" : "Off")"
                            IconSize="Size.Large"/>
                        <span style="display: inline-block;">CC timeout</span>
                        <div style="width: 15%; display: inline-block;">
                            <MudTextField @bind-Value="@CC_Timeout_value" Label="CC Timeout" Variant="Variant.Outlined" Class="small-textField" />
                        </div>
                        <div class="responsive-slider">
                            <MudSlider T="double" @bind-Value="@CC_Timeout_value" ValueLabel="true" Variant="Variant.Filled"
                                    Min="0" Max="100" Step="0.1" Size="Size.Large" />
                        </div>
                    </div>
                    <div class="timeout-group">
                        <MudToggleIconButton @bind-Toggled="CV_Enable"
                            Icon="@Icons.Material.Filled.ToggleOff"
                            Color="@Color.Error"
                            ToggledIcon="@Icons.Material.Filled.ToggleOn"
                            ToggledColor="@Color.Success"
                            title="@(CV_Enable ? "On" : "Off")" />
                        <span style="display: inline-block;">CV timeout</span>
                        <div style="width: 15%; display: inline-block;">
                            <MudTextField @bind-Value="@CV_Timeout_value" Label="CV timeout" Variant="Variant.Outlined" Class="small-textField" />
                        </div>
                        <div class="responsive-slider">
                            <MudSlider T="double" @bind-Value="@CV_Timeout_value" ValueLabel="true" Variant="Variant.Filled"
                                    Min="0" Max="100" Step="0.1" Size="Size.Large" />
                        </div>
                    </div>
                    <div class="timeout-group">
                        <MudToggleIconButton @bind-Toggled="FV_Enable"
                            Icon="@Icons.Material.Filled.ToggleOff"
                            Color="@Color.Error"
                            ToggledIcon="@Icons.Material.Filled.ToggleOn"
                            ToggledColor="@Color.Success"
                            title="@(FV_Enable ? "On" : "Off")" />
                        <span style="display: inline-block;">FV timeout</span>
                        <div style="width: 15%; display: inline-block;">
                            <MudTextField @bind-Value="@FV_Timeout_value" Label="FV timeout" Variant="Variant.Outlined" Class="small-textField" />
                        </div>
                        <div class="responsive-slider">
                            <MudSlider T="double" @bind-Value="@FV_Timeout_value" ValueLabel="true" Variant="Variant.Filled"
                                    Min="0" Max="100" Step="0.1" Size="Size.Large" />
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@code
{

    private DotNetObjectReference<Battery_setting> dotNetRef;
    private bool Init_Flag = false;
    private List<ElementReference>  FillRefs = new();
    private List<ElementReference>  ThumbRefs = new();

    private bool[] _sliderInitFlags;
    public class SliderItem
    {
        public double Value {get; set;}
        public string Label {get; set;} = null;
    }

    public List<SliderItem> Sliders = new();
    private ElementReference FillRef;
    private ElementReference ThumbRef;

    private double rangeValue;
    public bool CC_Enable {get; set;}
    public bool CV_Enable {get; set;}
    public bool FV_Enable {get; set;}
    private double CC_Timeout_value;
    private double CV_Timeout_value;
    private double FV_Timeout_value;

    private string selectedChartType = "line";
    private async Task OnChartTypeChanged(string value)
    {
        selectedChartType = value;

        var config = new
        {
            canvasID = "stageChart",
            chartType = selectedChartType,
            xLabel = "時間",
            y1Label = "電流 (A)",
            y2Label = "電壓 (V)",
            labels = new[] { "08:00", "09:00", "10:00", "11:00" },
            y1Data = new[] { 10, 20, 30, 40 },
            y2Data = new[] { 100, 101, 98, 102 }
        };

        await JS.InvokeVoidAsync("drawChart_Stage", config);
    }



    protected override void OnInitialized()
    {
        DataCenter.Battery.OnUpdated += OnBatteryChanged;
        
        var newInit = new BatteryInitData();
        DataCenter.Battery.UpdateFrom(newInit);
        float testFloat = 1.2f;
        Console.WriteLine($"testFloat = {testFloat}");
        Sliders = new List<SliderItem>
        {
            //index = 0
            new SliderItem { Label = "CC", Value = DataCenter.Battery.CC_Display},
            //index = 1
            new SliderItem { Label = "TC", Value = DataCenter.Battery.TC_Display},
            //index = 2
            new SliderItem { Label = "CV", Value = DataCenter.Battery.CV_Display},
            //index = 3
            new SliderItem { Label = "FV", Value = DataCenter.Battery.FV_Display}
        };
        FillRefs = new List<ElementReference>(new ElementReference[Sliders.Count]);
        ThumbRefs = new List<ElementReference>(new ElementReference[Sliders.Count]);
        
        Init_Flag = true;

        _sliderInitFlags = new bool[Sliders.Count];
        
    }

    private void OnBatteryChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        DataCenter.Battery.OnUpdated -= OnBatteryChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            
            var config = new CHART_STAGE_CONFIG
            {
                canvasID = "stageChart",
                Labels = new[] { "08:00", "09:00", "10:00", "11:00" },
                Y1Label = "電流 (A)",
                Y1Data = new[] { 30.0, 32.0, 31.0, 29.0 },
                Y2Label = "電壓 (V)",
                Y2Data = new[] { 101.0, 103.0, 102.0, 100.0 },
                XLabel = "時間"
            };

            await JS.InvokeVoidAsync("setSliderBars_Info", new{
                cc_val = DataCenter.Battery.CC_Display,
                cc_controlMax = DataCenter.Battery.CC_Max_Display,
                cc_minValue = DataCenter.Battery.CC_Min_Display,
                cc_fill = FillRefs[0],
                cc_thumb = ThumbRefs[0],

                tc_val = DataCenter.Battery.TC_Display,
                tc_controlMax = DataCenter.Battery.TC_Max_Display,
                tc_minValue = DataCenter.Battery.TC_Min_Display,
                tc_fill = FillRefs[1],
                tc_thumb = ThumbRefs[1],

                cv_val = DataCenter.Battery.CV_Display,
                cv_controlMax = DataCenter.Battery.CV_Max_Display,
                cv_minValue = DataCenter.Battery.CV_Min_Display,
                cv_fill = FillRefs[2],
                cv_thumb = ThumbRefs[2],

                fv_val = DataCenter.Battery.FV_Display,
                fv_controlMax = DataCenter.Battery.CV_Max_Display,
                fv_minValue = DataCenter.Battery.FV_Min_Display,
                fv_fill = FillRefs[3],
                fv_thumb = ThumbRefs[3],
            });

            await JS.InvokeVoidAsync("drawChart_Stage", config);

            for(int i = 0 ; i < Sliders.Count ; i ++)
            {
                var slider = Sliders[i];
                var (_, max) = GetDisplaySliderRange(slider.Label);

                await JS.InvokeVoidAsync("updateSliderVisual", new{
                    fill = FillRefs[i],
                    thumb = ThumbRefs[i],
                    value = slider.Value,
                    displayMaxValue = max,
                });
            }
            await JS.InvokeVoidAsync("sliderUpdateFromInput", dotNetRef);
        }
    }

    private async Task StartMouseDrag(MouseEventArgs e, int index, float _Min, float _displayMax)
    {
        var slider = Sliders[index];
        await JS.InvokeVoidAsync("startVerticalSliderDrag", new{
            fill = FillRefs[index],
            thumb = ThumbRefs[index],
            dotNetHelper = dotNetRef,
            index = index,
            minValue = _Min,
            displayMaxValue = _displayMax
        });
    }

    private async Task StartTouchDrag(TouchEventArgs e, int index, float _Min, float _displayMax)
    {
        var slider = Sliders[index];
        await JS.InvokeVoidAsync("startVerticalSliderDrag", new{
            fill = FillRefs[index],
            thumb = ThumbRefs[index],
            dotNetHelper = dotNetRef,
            index = index,
            minValue = _Min,
            displayMaxValue = _displayMax
        });
    }

    private async Task OnSliderInputChanged(int index)
    {
        var value = Sliders[index].Value;
        var (_, max) = GetDisplaySliderRange(Sliders[index].Label);
        await JS.InvokeVoidAsync("updateSliderVisual", new{
            fill = FillRefs[index],
            thumb = ThumbRefs[index],
            value = Sliders[index].Value,
            displayMaxValue = max,
        });
    }


    //根據拉動的某一條bar，修改UI上對應的input value數值
    [JSInvokable("UpdateSliderValue")]
    public void UpdateSliderValueFromJs(int index, double value)
    {
        @* 
        index 0 : CC
        index 1 : TC
        index 2 : CV
        index 3 : FV 
        *@

        var currentSlider = Sliders[index];
        currentSlider.Value = value;
        
        switch(currentSlider.Label)
        {
            case "CC":
                var tempSlider_CC = Sliders[index];
                break;
            case "TC":
                break;
            case "CV":
                break;
            case "FV":
                break;
            default:
                break;
        }

        StateHasChanged();
    }

    private(float min, float max) GetDisplaySliderRange(string label)
    {
        return label switch
        {
            "CC" => (DataCenter.Battery.CC_Min_Display, DataCenter.Battery.CC_Max_Display),
            "TC" => (DataCenter.Battery.TC_Min_Display, DataCenter.Battery.CC_Max_Display),
            "CV" => (DataCenter.Battery.CV_Min_Display, DataCenter.Battery.CV_Max_Display),
            "FV" => (DataCenter.Battery.FV_Min_Display, DataCenter.Battery.CV_Max_Display),
            _ => (0, 100)
        };
    }

    private async Task OnSliderMouseDown(MouseEventArgs e, int index, string label)
    {
        var (min, displayMax) = GetDisplaySliderRange(label);
        await StartMouseDrag(e, index, min, displayMax);
    }

    private async Task OnSliderTouchStart(TouchEventArgs e, int index, string label)
    {
        var (min, displayMax) = GetDisplaySliderRange(label);
        await StartTouchDrag(e, index, min, displayMax);
    }

    
}
