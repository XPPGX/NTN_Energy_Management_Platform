@namespace demoVer.Shared
@using demoVer.Models
@inject IJSRuntime JS
@inject CardUpdateNotifier Notifier
@inject DataCenter DataCenter
@implements IDisposable
@inherits LayoutComponentBase
<div class="Watt_diagram-container @CssClass" @attributes="AdditionalAttributes">
    <canvas id="@currentCard.Chart_Setting.canvasID"></canvas>
    @if(showEditButton)
    {
        @* <button class="top-right-button" @onclick="openEditMenu">⋯</button> *@
        <MudButton Variant="Variant.Text"
                Style="position: absolute; top: 4px; right: 4px; padding: 4px 8px; font-size: 16px; z-index: 999;"
                OnClick="openEditMenu"
                Class="custom-top-right-button"
                Color="Color.Default">
            <MudIcon Icon="@Icons.Material.Filled.MoreHoriz" />
        </MudButton>
    }
</div>

@code
{
    [Parameter] public string CssClass {get; set; }
    [Parameter(CaptureUnmatchedValues  = true)] public Dictionary<string, object> AdditionalAttributes {get; set; }
    [Parameter] public bool showEditButton {get; set; }
    [Parameter] public EventCallback<string> Inform_Home_openEditMenu {get; set;}
    [Parameter] public CardInfo currentCard {get; set;}

    private async Task openEditMenu()
    {
        if(Inform_Home_openEditMenu.HasDelegate)
        {
            //Pass the razor component name to HOME, the name can be found definition in the HOME CardInfos List.
            await Inform_Home_openEditMenu.InvokeAsync(currentCard.ID);
        }
    }
    
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            if(currentCard == null)
            {
                Console.WriteLine("[BlankChartCard] : currentCard == null !!");
            }
            else
            {
                Console.WriteLine("[BlankChartCard] : currentCard != null !!");
            }

            try{
                
                //[Debug] draw chart
                await JS.InvokeVoidAsync("drawChart_Func", currentCard.Chart_Setting);
            }
            catch(Exception ex)
            {
                Console.WriteLine("Error : " + ex.Message);
            }
        }
    }

    protected override void OnInitialized()
    {
        if(!string.IsNullOrEmpty(currentCard.ID))
        {
            DataCenter.RegisterChartListener(UpdateData_OnChart);
            Notifier.Register(currentCard.ID, Refresh);
        }
    }

    private async Task Refresh()
    {
        
        Console.WriteLine($"[Chart:{currentCard.ID}] 收到重新繪圖通知");
        await JS.InvokeVoidAsync("drawChart_Func", currentCard.Chart_Setting);
    }

    private async Task UpdateData_OnChart()
    {
        Console.WriteLine("[UpdateData_OnChart]");
        DataCenter.ApplySimulatedDataToChart(currentCard.Chart_Setting);
        await JS.InvokeVoidAsync("drawChart_Func", currentCard.Chart_Setting);
    }

    public void Dispose()
    {
        if(!string.IsNullOrEmpty(currentCard.ID))
        {
            DataCenter.UnregisterChartListener(UpdateData_OnChart);
            Notifier.Unregister(currentCard.ID);
        }
    }
}