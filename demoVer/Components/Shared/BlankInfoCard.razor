@namespace demoVer.Shared
@inherits LayoutComponentBase
@using demoVer.Models
<div class="infoCard-container @CssClass" @attributes="AdditionalAttributes">
    <div class="infoCard-container top">
        <h4>@(string.IsNullOrEmpty(currentCard.cardName) ? "請編輯卡片" : currentCard.cardName)</h4>
        @if(showEditButton)
        {
            @* <button class="top-right-button" @onclick="openEditMenu">⋯</button> *@
            <MudButton Variant="Variant.Text"
                    Style="position: absolute; top: 4px; right: 4px; padding: 4px 8px; font-size: 16px; z-index: 999;"
                    OnClick="openEditMenu"
                    Class="custom-top-right-button"
                    Color="Color.Default">
                <MudIcon Icon="@Icons.Material.Filled.MoreHoriz" />
            </MudButton>
        }
    </div>
    <div class="infoCard-container bottom">
        @* @foreach(var block in InfoTuples)
        {
            <InfoDataItem IconPath="@block.IconPath"
                            DataPairs="@block.DataPairs" />
        } *@
        @if(currentCard?.Info_DataItems != null)
        {
             @foreach (var Info_DataItems_iterator in currentCard.Info_DataItems)
            {
                string temp_iconPath = string.IsNullOrEmpty(Info_DataItems_iterator.iconPath) ? "images/square.png" : Info_DataItems_iterator.iconPath;
                
                List<(string valueName, string unit)> temp_DataPairs = new List<(string valueName, string unit)>();
                foreach (var Info_DataFormat_iter in Info_DataItems_iterator.INFO_DataFormats)
                {
                    temp_DataPairs.Add((Info_DataFormat_iter.ValueName, Info_DataFormat_iter.Unit));   
                }

                <InfoDataItem IconPath="@temp_iconPath"
                                DataPairs="@temp_DataPairs" />
            }
        }
       
    </div>
</div>

@code
{
    [Parameter] public string CssClass {get; set; }
    [Parameter(CaptureUnmatchedValues  = true)] public Dictionary<string, object> AdditionalAttributes {get; set; }
    [Parameter] public bool showEditButton {get; set; }
    [Parameter] public EventCallback<string> Inform_Home_openEditMenu {get; set;}
    [Parameter] public CardInfo currentCard {get; set;}

    private async Task openEditMenu()
    {
        if(Inform_Home_openEditMenu.HasDelegate)
        {
            //Pass the razor component name to HOME, the name can be found definition in the HOME CardInfos List.
            await Inform_Home_openEditMenu.InvokeAsync(currentCard.ID);
            Console.WriteLine("[BlankInfoCard] Current edit Card (from card) : " + currentCard.ID);
        }
    }

    public List<InfoTuple> InfoTuples = new()
    {
        @* new InfoTuple
        {
            IconPath = "images/transmission-tower.png",
            DataPairs = new()
            {
                ("輸入電壓：", "220V"),
                ("輸入頻率：", "60Hz")
            }
        },
        new InfoTuple
        {
            IconPath = "images/fridge.png",
            DataPairs = new()
            {
                ("輸出電壓：", "48V"),
                ("輸出頻率：", "0Hz")
            }
        }, *@
    };

}