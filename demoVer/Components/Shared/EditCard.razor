@namespace demoVer.Shared
@inherits LayoutComponentBase
@using demoVer.Models
@using System
@using System.IO
@using System.Text.Json
@using Newtonsoft.Json.Linq
@inject IWebHostEnvironment WebHostEnvironment

@switch(currentCardInfo.card_Type)
{
    case CardType.Info:
        switch(INFO_setting_stage)
        {
            case INFO_SETTING_STAGE.ADD_ROW_STAGE:
                <div class="edit-info-top">
                    <input class="input-edit" @bind=edit_CardName placeholder="輸入卡片名稱" style="text-align: center;"/>
                </div>
                <br>
                @* <div class="underline"></div> *@
                <table class="table">
                    <thead>
                        <tr>
                            <th>圖示</th>
                            <th>內容設定</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for(int i = 0 ; i < edit_INFO_DataItems.Count ; i ++)
                        {
                            var temp = edit_INFO_DataItems[i];
                            string iconPath;
                            iconPath = (string.IsNullOrEmpty(temp.iconPath)) ? "images/square.png" : temp.iconPath;
                            <tr>
                                <td>
                                    <button class="icon-button" @onclick="() => selectImg(temp)">
                                        <img src=@iconPath alt="waitImg"/>
                                    </button>
                                </td>
                                <td class="clickable-td" @onclick="() => AdjustValueCmdRow(temp)">
                                    @(temp.status switch
                                        {
                                            SettingStatus.YET => "設定",
                                            SettingStatus.PROGRESS => "設定未完成",
                                            SettingStatus.DONE => "設定完成",
                                            _ => ""
                                        }
                                    )
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="confirm-cancel-container">
                    <MudButton OnClick="Add_INFO_DataItem"
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.Add"
                            Style="width: 120px;">
                        新增
                    </MudButton>
                    <MudButton OnClick="Confirm_INFO_DataItem"
                            Variant="Variant.Filled"
                            Color="Color.Success"
                            Style="width: 120px;">
                        確定
                    </MudButton>
                </div>
                break;
            case INFO_SETTING_STAGE.SELECT_ICON_STAGE:
                <div class="img-select-grid">
                    @foreach(var imgPath in imgRelativePaths)
                    {
                        <div class="img-select-icon">
                            <button class="icon-button" @onclick="() => selectedImgFile(imgPath)">
                                <img src=@imgPath alt="waiting"/>
                            </button>
                        </div>
                    }
                </div>
                break;
            case INFO_SETTING_STAGE.SETTING_VALUE_AND_CMD_STAGE:
                <div class="edit-info-top">
                    <h3>數值與命令設定</h3>
                </div>
                <table class="table">
                    <tbody>
                        @if(currentEdit_INFO_DataFormat_ref != null)
                        {
                            <tr>
                                <th>設備選擇</th>
                                <td class="clickable-td" @onclick="() => selectMachine()">
                                    @(string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.MachineName) ? "設定" : currentEdit_INFO_DataFormat_ref.MachineName)
                                </td>
                            </tr>
                            <tr>
                                <th>命令選擇</th>
                                <td class="clickable-td" @onclick="() => selectCMD()">
                                    @(string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Cmd) ? "設定" : currentEdit_INFO_DataFormat_ref.Cmd)
                                </td>
                            </tr>
                            <tr>
                                <th>數值名稱</th>
                                <td>
                                    <input @bind="currentEdit_INFO_DataFormat_ref.ValueName" class="td-input"  style="text-align: center;"/>
                                </td>
                            </tr>
                            <tr>
                                <th>單位</th>
                                <td class="clickable-td" @onclick="() => selectUnit()" style="text-align: center;">
                                    @{
                                        string Uint_To_show = "";
                                        if(string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Cmd))
                                        {
                                            Uint_To_show = "請先選擇命令";
                                        }
                                        else
                                        {
                                            if(string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Unit))
                                            {
                                                Uint_To_show = "設定";
                                            }
                                            else
                                            {
                                                Uint_To_show = currentEdit_INFO_DataFormat_ref.Unit;
                                            }
                                        }
                                    }
                                    @Uint_To_show
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="confirm-cancel-container">
                     <MudButton OnClick="confirm_INFO_DataFormat_ValueSetting"
                            Variant="Variant.Filled"
                            Color="Color.Success">
                        確定
                    </MudButton>
                    @* <button @onclick="confirm_INFO_DataFormat_ValueSetting">確認</button> *@
                </div>
                break;
            case INFO_SETTING_STAGE.MACHINE_SELECTION_STAGE:
                <div class="scrollable-list">
                    @foreach (var item in machineNameLists)
                    {
                        <div class="list-item" @onclick="() => clickMachineName(item)">@item</div>
                    }
                </div>
                break;
            case INFO_SETTING_STAGE.CMD_SELECTION_STAGE:
                <div class="scrollable-list">
                    @foreach (var item in cmdDict)
                    {
                        <div class="list-item" @onclick="() => clickCmd(item.Key)" style="text-align: ">@item.Key</div>
                    }
                </div>
                break;
            case INFO_SETTING_STAGE.UNIT_SELECTION_STAGE:
                <div class="scrollable-list">
                    @foreach (var unit in UnitLists)
                    {
                        <div class="list-item" @onclick="() => clickUnit(unit)">@unit</div>
                    }
                </div>
                break;
            
            case INFO_SETTING_STAGE.ADD_VALUE_AND_CMD_ROW_STAGE:
                <div style="max-height: 300px; overflow-y: auto;">
                    <table class="table">
                        <thead>
                            <th>數值名稱</th>
                            <th>單位</th>
                        </thead>
                        <tbody>
                            @foreach(var tempDataFormat in currentEdit_INFO_DataItem_ref.INFO_DataFormats)
                            {
                                <tr>
                                    <td class="clickable-td" @onclick="() => setValueAndCmd(tempDataFormat)">
                                        @(string.IsNullOrEmpty(tempDataFormat.ValueName) ? "點擊設定" : tempDataFormat.ValueName)
                                    </td>
                                    <td>
                                        @(string.IsNullOrEmpty(tempDataFormat.Unit) ? "" : tempDataFormat.Unit)
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @* <button @onclick="AddRow_ValueAndCmd">新增</button> *@
                <div class="confirm-cancel-container">
                    <MudButton OnClick="AddRow_ValueAndCmd"
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.Add"
                            Style="width: 120px;">
                        新增
                    </MudButton>
                    <MudButton OnClick="confirm_INFO_DataFormats_Setting"
                                Variant="Variant.Filled"
                                Color="Color.Success"
                                Style="width: 120px;">
                        確認
                    </MudButton>
                </div>
                break;

            default:
                break;
        }
        
        break;
    case CardType.Chart:
        <h3>編輯 : 圖表</h3>
        break;
    case CardType.Status:
        <h3>編輯 : 連接狀態</h3>
        break;
    default:
        break;
}




@code{
    //DEBUG
    private List<string> machineNameLists = new List<string>()
    {
         "第一行資料", "第二行資料", "第三行資料", "第四行資料",
        "第五行資料", "第六行資料", "第七行資料", "第八行資料"
    };

    @* private List<string> cmdLists = new List<string>()
    {
        "Current", "Voltage", "第三行命令", "第四行命令",
        "第五行命令", "第六行命令", "第七行命令", "第八行命令"
    }; *@

    

    [Parameter] public CardInfo currentCardInfo {get; set;}
    [Parameter] public EventCallback<CardInfo> OnCardInfoUpdated {get; set;}


    private bool _isFirstParameterSet = true;
    private INFO_SETTING_STAGE INFO_setting_stage = INFO_SETTING_STAGE.ADD_ROW_STAGE;
    private string title;
    private string imgFolderPath = "";
    private List<string> imgRelativePaths = new List<string>();
    
    private INFO_DataItem currentEdit_INFO_DataItem_ref; //reference, modify in memory
    private INFO_DataItem temp_INFO_DataItem_Backend;
    private INFO_DataFormat currentEdit_INFO_DataFormat_ref; //This is point to the one DataFormat of temp_INFO_DataItem_Backend.INFO_DataFormats
    private JObject cmdDict;
    private string edit_CardName;
    string Cmd_filePath = "CMD_and_Unit.json";

    private List<string> UnitLists;

    protected override void OnInitialized()
    {
        Console.WriteLine("🚀 元件初始化：OnInitialized 被呼叫");
        // 初始化邏輯，例如建立預設值、讀取 localStorage、設定變數等
        imgFolderPath = Path.Combine(WebHostEnvironment.WebRootPath, "images/user_selections");
        getCMDs();
        getImgFiles();
    }
    
    protected override void OnParametersSet()
    {
        if (_isFirstParameterSet)
        {
            _isFirstParameterSet = false;

            // ✅ 第一次接收到 [Parameter] 時要執行的邏輯
            Console.WriteLine("🚀 第一次接收到參數 currentCardInfo！");
            if(!string.IsNullOrEmpty(currentCardInfo.cardName))
            {
                Console.WriteLine("[EditCard] : currentCardInfo.cardName = " + currentCardInfo.cardName);
                edit_CardName = currentCardInfo.cardName;
            }
        }
    }

    private List<INFO_DataItem> edit_INFO_DataItems = new List<INFO_DataItem>
    {
        new INFO_DataItem()
        {
            iconPath = "images/user_selections/car-battery.png",
            status = SettingStatus.DONE,
            INFO_DataFormats = new List<INFO_DataFormat>{
                new INFO_DataFormat()
                {
                    MachineName = "123",
                    Cmd = "Current",
                    ValueName = "Test",
                    Unit = "A"
                }
            }
        }
    };

    private void getImgFiles()
    {
        if(Directory.Exists(imgFolderPath))
        {
            
            imgRelativePaths = Directory.GetFiles(imgFolderPath)
                                    .Select(path => "images/user_selections/" + Path.GetFileName(path))
                                    .ToList();
            foreach(var names in imgRelativePaths)
            {
                Console.WriteLine(names);
            }
        }
        else
        {
            Console.WriteLine("FAIL : getImgFiles");
        }
    }

    private async Task getCMDs()
    {
        if(File.Exists(Cmd_filePath))
        {
            string json = File.ReadAllText(Cmd_filePath);
            cmdDict = JObject.Parse(json);

            @* var json = await File.ReadAllTextAsync(Cmd_filePath);
            cmdDict = JsonSerializer.Deserialize<Dictionary<string, object>>(json);

            var jsonString = JsonSerializer.Serialize(cmdDict, new JsonSerializerOptions { WriteIndented = true });
            Console.WriteLine(jsonString); *@

        }
    }

    private void Add_INFO_DataItem()
    {
        edit_INFO_DataItems.Add(new INFO_DataItem());
    }

    private void selectImg(INFO_DataItem _temp_Info_DataItem)
    {
        currentEdit_INFO_DataItem_ref = _temp_Info_DataItem; 
        INFO_setting_stage = INFO_SETTING_STAGE.SELECT_ICON_STAGE;
    }

    private void selectedImgFile(string _imgPath)
    {
        Console.WriteLine(_imgPath);

        currentEdit_INFO_DataItem_ref.iconPath = _imgPath;
        INFO_setting_stage = INFO_SETTING_STAGE.ADD_ROW_STAGE;
    }

    private void AdjustValueCmdRow(INFO_DataItem _temp_Info_DataItem)
    {
        Console.WriteLine("AdjustValueCmdRow");

        //如果是已經存在的 currentEdit_INFO_DataItem，則

        currentEdit_INFO_DataItem_ref = _temp_Info_DataItem;
        
        INFO_setting_stage = INFO_SETTING_STAGE.ADD_VALUE_AND_CMD_ROW_STAGE;
    }

    private void AddRow_ValueAndCmd()
    {
        currentEdit_INFO_DataItem_ref.INFO_DataFormats.Add(new INFO_DataFormat());
    }

    private void setValueAndCmd(INFO_DataFormat _temp_DataFormat)
    {
        Console.WriteLine("setValueAndCmd");
        currentEdit_INFO_DataFormat_ref = _temp_DataFormat;
        INFO_setting_stage = INFO_SETTING_STAGE.SETTING_VALUE_AND_CMD_STAGE;
    }

    private void selectMachine()
    {
        Console.WriteLine("selectMachine");
        INFO_setting_stage = INFO_SETTING_STAGE.MACHINE_SELECTION_STAGE;
    }

    private void selectCMD()
    {
        Console.WriteLine("selectCMD");
        INFO_setting_stage = INFO_SETTING_STAGE.CMD_SELECTION_STAGE;
    }

    private void selectUnit()
    {
        Console.WriteLine("selectUnit");
        if(!string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Cmd))
        {
            Console.WriteLine("selectUnit : currentEdit_INFO_DataFormat_ref.Cmd = " + currentEdit_INFO_DataFormat_ref.Cmd);
            if(cmdDict.ContainsKey(currentEdit_INFO_DataFormat_ref.Cmd))
            {
                var unitToken = cmdDict[currentEdit_INFO_DataFormat_ref.Cmd]["Unit"];
                if(unitToken != null)
                {
                    UnitLists = cmdDict[currentEdit_INFO_DataFormat_ref.Cmd]["Unit"].ToObject<List<string>>();
                }
            }
            INFO_setting_stage = INFO_SETTING_STAGE.UNIT_SELECTION_STAGE;
        }
        else
        {
            Console.WriteLine("selectUnit : 尚未選擇CMD (這邊可以跳個Alert框)");
        }
    }

    private void clickMachineName(string _selectedMachineName)
    {
        currentEdit_INFO_DataFormat_ref.MachineName = _selectedMachineName;
        INFO_setting_stage = INFO_SETTING_STAGE.SETTING_VALUE_AND_CMD_STAGE;
    }
    private void clickCmd(string _cmd)
    {
        if(currentEdit_INFO_DataFormat_ref.Cmd != _cmd)
        {
            currentEdit_INFO_DataFormat_ref.Cmd = _cmd;
            currentEdit_INFO_DataFormat_ref.Unit = "";
        }
        

        INFO_setting_stage = INFO_SETTING_STAGE.SETTING_VALUE_AND_CMD_STAGE;
    }
    private void clickUnit(string _unit)
    {
        currentEdit_INFO_DataFormat_ref.Unit = _unit;
        INFO_setting_stage = INFO_SETTING_STAGE.SETTING_VALUE_AND_CMD_STAGE;
    }

    private void confirm_INFO_DataFormat_ValueSetting()
    {
        if( string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.MachineName)      ||
            string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Cmd)              ||
            string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.ValueName)        ||
            string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Unit)             ) 
        {
            Console.WriteLine("有數值沒有設定");
            return;
        }

        
        @* currentEdit_INFO_DataItem_ref.MachineName   = temp_INFO_DataItem_Backend.MachineName;
        currentEdit_INFO_DataItem_ref.Cmd           = temp_INFO_DataItem_Backend.Cmd;
        currentEdit_INFO_DataItem_ref.ValueName     = temp_INFO_DataItem_Backend.ValueName;
        currentEdit_INFO_DataItem_ref.Unit          = "";
        currentEdit_INFO_DataItem_ref.status        = SettingStatus.DONE; *@
        
        Console.WriteLine("[currentEdit_INFO_DataItem_ref] :");
        string json = JsonSerializer.Serialize(currentEdit_INFO_DataItem_ref, new JsonSerializerOptions{
            WriteIndented = true
        });
        Console.WriteLine(json);


        INFO_setting_stage = INFO_SETTING_STAGE.ADD_VALUE_AND_CMD_ROW_STAGE;
    }
    
    private void confirm_INFO_DataFormats_Setting()
    {
        currentEdit_INFO_DataItem_ref.status = SettingStatus.DONE;
        INFO_setting_stage = INFO_SETTING_STAGE.ADD_ROW_STAGE;
    }

    private void Confirm_INFO_DataItem()
    {
        Console.WriteLine("[edit_INFO_DataItems] : ");
        string json = JsonSerializer.Serialize(edit_INFO_DataItems, new JsonSerializerOptions{
            WriteIndented = true
        });
        Console.WriteLine(json);
    
        currentCardInfo.cardName = edit_CardName;
        currentCardInfo.Info_DataItems = edit_INFO_DataItems;
        
        // 通知父元件更新 currentCardInfo
        OnCardInfoUpdated.InvokeAsync(currentCardInfo);
    }

}