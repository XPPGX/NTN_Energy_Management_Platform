@namespace demoVer.Shared
@inherits LayoutComponentBase
@using demoVer.Models
@using System
@using System.IO
@using System.Text.Json
@using Newtonsoft.Json.Linq
@using MudBlazor

@inject IWebHostEnvironment WebHostEnvironment
@inject IJSRuntime JS
@inject IDialogService DialogService

@*每個要用MudBlazor的razor元件，都要引入如下元件*@
@using MudBlazor
<MudThemeProvider/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@*
edit-container是用來綁以下javascript事件的 id : 
1.電腦右鍵
2.手機長按
*@
<div id=edit-container @onclick="CloseMenu">
@switch(currentCardInfo.card_Type)
{
    case CardType.Info:
        @if(showMenu)
        {
            <div class="custom-menu" style="top:@($"{menuY}px"); left:@($"{menuX}px");" @onclick:stopPropagation>
                <div class="custom-menu-item" @onclick="Edit_inCorrespondingStage">編輯</div>
                <div class="custom-menu-item" @onclick="Delete_inCorrespondingStage">刪除</div>
            </div>
            
        }
        @if(ConfirmDialog)
        {
            <div id="confirmDialog" class="custom-dialog-overlay">
                <div class="custom-dialog">
                    <div class="custom-dialog-content">
                        <div class="icon-container">
                            ⚠️
                        </div>
                        <p id="dialogMessage" class="dialog-message">@AlertMessage</p>
                    </div>
                    <div class="custom-dialog-actions">
                        <button class="btn cancel-btn" @onclick="Cancel">取消</button>
                        <button class="btn confirm-btn" @onclick="Confirm">確定</button>
                    </div>
                </div>
            </div>
        }

        switch(INFO_setting_stage)
        {
            case INFO_SETTING_STAGE.ADD_ROW_STAGE:
                <div class="edit-info-top">
                    <input class="input-edit" @bind=edit_CardName placeholder="輸入卡片名稱" style="text-align: center;"/>
                </div>
                <br>
                @* <div class="underline"></div> *@
                <table class="table no-text-select" id="table-settingInfoDataItem">
                    <thead>
                        <tr>
                            <th>圖示</th>
                            <th>內容設定</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for(int i = 0 ; i < edit_INFO_DataItems.Count ; i ++)
                        {
                            var temp = edit_INFO_DataItems[i];
                            string iconPath;
                            iconPath = (string.IsNullOrEmpty(temp.iconPath)) ? "images/square.png" : temp.iconPath;
                            <tr>
                                <td>
                                    <button class="icon-button" @onclick="() => selectImg(temp)">
                                        <img src=@iconPath alt="waitImg"/>
                                    </button>
                                </td>
                                <td class="basic-td long-press-row" data-table="table-settingInfoDataItem" data-index="@i">
                                @* <td class="clickable-td" @onclick="() => AdjustValueCmdRow(temp)"> *@
                                    @{
                                        string hint = "";
                                        switch(temp.status)
                                        {
                                            case SettingStatus.YET:
                                                if(isMobile){hint = "長按此處編輯";}
                                                else{hint = "右鍵編輯";}
                                                break;
                                            case SettingStatus.PROGRESS:
                                                if(isMobile){hint = "未完成:長按此處編輯";}
                                                else{hint = "未完成:右鍵編輯";}
                                                break;
                                            case SettingStatus.DONE:
                                                hint = "設定完成";
                                                break;
                                            default:
                                                hint = "";
                                                break;
                                        }
                                    }
                                    @hint
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="confirm-cancel-container">
                    <MudButton Class="no-transform"
                            OnClick="Add_INFO_DataItem"
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.Add"
                            Style="width: 120px;">
                        新增
                    </MudButton>
                    <MudButton Class="no-transform" 
                            OnClick="Confirm_INFO_DataItem"
                            Variant="Variant.Filled"
                            Color="Color.Success"
                            Style="width: 120px;">
                        確定
                    </MudButton>
                </div>
                break;
            case INFO_SETTING_STAGE.SELECT_ICON_STAGE:
                <div class="img-select-grid">
                    @foreach(var imgPath in imgRelativePaths)
                    {
                        <div class="img-select-icon">
                            <button class="icon-button" @onclick="() => selectedImgFile(imgPath)">
                                <img src=@imgPath alt="waiting"/>
                            </button>
                        </div>
                    }
                </div>
                break;
            case INFO_SETTING_STAGE.SETTING_VALUE_AND_CMD_STAGE:
                <div class="edit-info-top">
                    <h3>數值與命令設定</h3>
                </div>
                <table class="table">
                    <tbody>
                        @if(currentEdit_INFO_DataFormat_ref != null)
                        {
                            <tr>
                                <th>設備選擇</th>
                                <td class="clickable-td" @onclick="() => selectMachine()">
                                    @(string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.MachineName) ? "設定" : currentEdit_INFO_DataFormat_ref.MachineName)
                                </td>
                            </tr>
                            <tr>
                                <th>命令選擇</th>
                                <td class="clickable-td" @onclick="() => selectCMD()">
                                    @(string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Cmd) ? "設定" : currentEdit_INFO_DataFormat_ref.Cmd)
                                </td>
                            </tr>
                            <tr>
                                <th>數值名稱</th>
                                <td>
                                    <input @bind="currentEdit_INFO_DataFormat_ref.ValueName" class="td-input"  style="text-align: center;"/>
                                </td>
                            </tr>
                            <tr>
                                <th>單位</th>
                                <td class="clickable-td" @onclick="() => selectUnit()" style="text-align: center;">
                                    @{
                                        string Uint_To_show = "";
                                        if(string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Cmd))
                                        {
                                            Uint_To_show = "請先選擇命令";
                                        }
                                        else
                                        {
                                            if(string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Unit))
                                            {
                                                Uint_To_show = "設定";
                                            }
                                            else
                                            {
                                                Uint_To_show = currentEdit_INFO_DataFormat_ref.Unit;
                                            }
                                        }
                                    }
                                    @Uint_To_show
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="confirm-cancel-container">
                     <MudButton OnClick="confirm_INFO_DataFormat_ValueSetting"
                            Variant="Variant.Filled"
                            Color="Color.Success">
                        確定
                    </MudButton>
                    @* <button @onclick="confirm_INFO_DataFormat_ValueSetting">確認</button> *@
                </div>
                break;
            case INFO_SETTING_STAGE.MACHINE_SELECTION_STAGE:
                <MudPaper Elevation="2" Class="pa-2 rounded" Style="width: 200px; max-height: 240px; overflow-y: auto;">
                    <MudList T="string" Dense="true" Hover="true">
                        @foreach (var item in machineNameLists)
                        {
                            <MudListItem T="string"
                                        @onclick="() => clickMachineName(item)"
                                        Style="cursor: pointer;">
                                <MudListItemIcon>
                                    <MudIcon Icon="@Icons.Material.Filled.KeyboardCommandKey" />
                                </MudListItemIcon>
                                <MudText Class="ml-2">@item</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
                
                @* <div class="scrollable-list">
                    @foreach (var item in machineNameLists)
                    {
                        <div class="list-item" @onclick="() => clickMachineName(item)">@item</div>
                    }
                </div> *@
                break;
            case INFO_SETTING_STAGE.CMD_SELECTION_STAGE:
                <MudPaper Elevation="2" Class="pa-2 rounded" Style="width: 200px; max-height: 240px; overflow-y: auto;">
                    <MudList T="string" Dense="true" Hover="true">
                        @foreach (var item in cmdDict)
                        {
                            <MudListItem T="string"
                                        @onclick="() => clickCmd(item.Key)"
                                        Style="cursor: pointer;">
                                <MudListItemIcon>
                                    <MudIcon Icon="@Icons.Material.Filled.Code" />
                                </MudListItemIcon>
                                <MudText Class="ml-2">@item.Key</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
                break;
            case INFO_SETTING_STAGE.UNIT_SELECTION_STAGE:
                <MudPaper Elevation="2" Class="pa-2 rounded" Style="width: 200px; max-height: 240px; overflow-y: auto;">
                    <MudList T="string" Dense="true" Hover="true">
                        @foreach (var unit in UnitLists)
                        {
                            <MudListItem T="string"
                                        @onclick="() => clickUnit(unit)"
                                        Style="cursor: pointer;">
                                <MudListItemIcon>
                                    <MudIcon Icon="@Icons.Material.Filled.Sensors" />
                                </MudListItemIcon>
                                <MudText Class="ml-2">@unit</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
                break;
            
            case INFO_SETTING_STAGE.ADD_VALUE_AND_CMD_ROW_STAGE:
                <div style="max-height: 300px; overflow-y: auto;">
                    <h4>@(isMobile? "長按編輯" : "右鍵編輯")</h4>
                    <table class="table no-text-select" id="table-settingInfoDataFormat">
                        <thead>
                            <th>數值名稱</th>
                            <th>單位</th>
                        </thead>
                        <tbody @onclick:stopPropagation>
                            @for(int i = 0 ; i < currentEdit_INFO_DataItem_ref.INFO_DataFormats.Count ; i ++)
                            {
                                var tempDataFormat = currentEdit_INFO_DataItem_ref.INFO_DataFormats[i];
                                <tr class="long-press-row" data-table="table-settingInfoDataFormat" data-index="@i">
                                    <td class="basic-td">
                                        @(string.IsNullOrEmpty(tempDataFormat.ValueName) ? "" : tempDataFormat.ValueName)
                                    </td>
                                    <td>
                                        @(string.IsNullOrEmpty(tempDataFormat.Unit) ? "" : tempDataFormat.Unit)
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="confirm-cancel-container">
                    <MudButton OnClick="AddRow_ValueAndCmd"
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.Add"
                            Style="width: 120px;">
                        新增
                    </MudButton>
                    <MudButton OnClick="confirm_INFO_DataFormats_Setting"
                                Variant="Variant.Filled"
                                Color="Color.Success"
                                Style="width: 120px;">
                        確認
                    </MudButton>
                </div>
                break;
            default:
                break;
        }
        
        break;
    case CardType.Chart:
        <h5>編輯 : 圖表</h5>
        switch(CHART_setting_stage)
        {
            case CHART_SETTING_STAGE.OVERVIEW:
                @* <table class="table no-text-select" id="table-settingChartLines">
                    <thead>
                        <tr>
                            <th>No.</th>
                            <th>資料名稱</th>
                            <th>顏色</th>
                        </tr>
                    </thead>
                    <tbody>

                    </tbody>
                </table> *@
                break;
            case CHART_SETTING_STAGE.SINGLE_SETTING:
                @* <EditForm Model="edit_ChartSetting" OnValidSubmit="ChartDetailSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    
                    <div class="form-group d-flex align-items-center mb-2">
                        <label class="form-label me-2 mb-0" style="width: 100px;">圖表標題</label>
                        <InputText class="form-control flex-grow-1" @bind-Value="edit_ChartSetting.ChartTitle" />
                    </div>
                    <div class="form-group d-flex align-items-center mb-2">
                        <label class="form-label me-2 mb-0" style="width: 100px;">Command</label>
                        <MudButton Style="width: 100%;" Class="flex-grow-1 text-start" Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" OnClick="SetCMD_CHART">選擇命令</MudButton>
                    </div> 
                    <div class="form-group d-flex align-items-center mb-2">
                        <label class="form-label me-2 mb-0" style="width: 100px;">Y 軸標題</label>
                        <InputText class="form-control flex-grow-1" @bind-Value="edit_ChartSetting.YTitle" />
                    </div>
                    <div class="form-group d-flex align-items-center mb-2">
                        <label class="form-label me-2 mb-0" style="width: 100px;">X 軸標題</label>
                        <InputText class="form-control flex-grow-1" @bind-Value="edit_ChartSetting.XTitle" />
                    </div>
                     

                    <button type="submit" class="btn btn-primary mt-2">儲存</button>
                </EditForm> *@
                break;
            case CHART_SETTING_STAGE.SELECT_CMD_STAGE:
                @* <MudPaper Elevation="2" Class="pa-2 rounded" Style="width: 200px; max-height: 240px; overflow-y: auto;">
                    <MudList T="string" Dense="true" Hover="true">
                        @foreach (var item in cmdDict)
                        {
                            <MudListItem T="string"
                                        @onclick="() => clickCmd_CHART(item.Key)"
                                        Style="cursor: pointer;">
                                <MudListItemIcon>
                                    <MudIcon Icon="@Icons.Material.Filled.Code" />
                                </MudListItemIcon>
                                <MudText Class="ml-2">@item.Key</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper> *@
                break;
            default:
                break;
            
        }
        
        break;
    case CardType.Status:
        <h3>編輯 : 連接狀態</h3>
        switch(STATUS_setting_stage)
        {
            case STATUS_SETTING_STAGE.OVERVIEW:
                <table class="table no-text-select" id="table-linkingStatus">
                    <colgroup>
                        <col style="width: 20%;">
                        <col style="width: 30%;">
                        <col style="width: 60%;">
                    </colgroup>
                    <thead>
                        <tr>
                            <th>No.</th>
                            <th>圖示</th>
                            <th>文字</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for(int i = 0 ; i < 4 ; i ++)
                        {
                            var temp = edit_Link_STATUS_Pairs[i];
                            if(temp == null)
                            {
                                Console.WriteLine($"temp is null!!!!");
                                return;
                            }
                            string iconPath = (string.IsNullOrEmpty(temp.iconPath)) ? "images/square.png" : temp.iconPath;
                            <tr>
                                <td>
                                    @(i+1)
                                </td>
                                <td>
                                    <button class="icon-button" @onclick="() => selectImg_LINK_STATUS(temp)">
                                        <img src=@iconPath alt="waitImg"/>
                                    </button>
                                </td>
                                <td>
                                    <input @bind="temp.Label" class="td-input" style="text-align: center;"/>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <MudButton Class="no-transform" 
                        OnClick="Confirm_LINK_STATUS"
                        Variant="Variant.Filled"
                        Color="Color.Success"
                        Style="width: 120px;">
                    確定
                </MudButton>
                break;
            case STATUS_SETTING_STAGE.SELECT_ICON_STAGE:
                <div class="img-select-grid">
                    @foreach(var imgPath in imgRelativePaths)
                    {
                        <div class="img-select-icon">
                            <button class="icon-button" @onclick="() => selectedImgFile_LINK_STATUS(imgPath)">
                                <img src=@imgPath alt="waiting"/>
                            </button>
                        </div>
                    }
                </div>
                break;

            default:
                break;
        }
        
        break;
    default:
        break;
}


</div>


@code{
    //DEBUG
    private List<string> machineNameLists = new List<string>()
    {
         "第一行資料", "第二行資料", "第三行資料", "第四行資料",
        "第五行資料", "第六行資料", "第七行資料", "第八行資料"
    };

    #region Common_Variables_and_Functions
    [Parameter] public CardInfo currentCardInfo {get; set;}
    [Parameter] public EventCallback<CardInfo> OnCardInfoUpdated {get; set;}
    private DotNetObjectReference<EditCard>? objRef;

    private bool _isFirstParameterSet = true;
    private string imgFolderPath = "";
    private List<string> imgRelativePaths = new List<string>();
    private bool isMobile = false;
    private JObject cmdDict;
    string Cmd_filePath = "CMD_and_Unit.json";
    private List<string> UnitLists;

    protected override void OnInitialized()
    {
        Console.WriteLine("🚀 元件初始化：OnInitialized 被呼叫");
        // 初始化邏輯，例如建立預設值、讀取 localStorage、設定變數等
        imgFolderPath = Path.Combine(WebHostEnvironment.WebRootPath, "images/user_selections");
        getCMDs();
        getImgFiles();
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerGroupedTableTouchAndRightClick", "edit-container", objRef);
            isMobile = await JS.InvokeAsync<bool>("checkIsMobile");
        }
    }

    protected override void OnParametersSet()
    {
        if (_isFirstParameterSet)
        {
            _isFirstParameterSet = false;

            // ✅ 第一次接收到 [Parameter] 時要執行的邏輯
            Console.WriteLine("🚀 第一次接收到參數 currentCardInfo！");
            if(!string.IsNullOrEmpty(currentCardInfo.cardName))
            {
                Console.WriteLine("[EditCard] : currentCardInfo.cardName = " + currentCardInfo.cardName);
                edit_CardName = currentCardInfo.cardName;

                switch(currentCardInfo.card_Type)
                {
                    case CardType.Info:
                        edit_INFO_DataItems = currentCardInfo.Info_DataItems; //edit_INFO_DataItems 與 currentCardInfo.Info_DataItems 同一塊記憶體
                        Console.WriteLine("[OnParameterSet]CardType.Info");
                        break;
                    case CardType.Chart:
                        edit_ChartSetting = currentCardInfo.Chart_Setting;
                        break;
                    case CardType.Status:
                        edit_Link_STATUS_Pairs = currentCardInfo.Link_STATUS_Pairs?.Select(pair => pair.DeepClone()).ToList(); //edit_Link_STATUS_Pairs 與 currentCardInfo.Link_STATUS_Pairs 不同記憶體
                        break;
                    default:
                        break;
                }
            }
        }
    }

    [JSInvokable]
    public void JS_Console(string _debug_message)
    {
        Console.WriteLine(_debug_message);
    }

    private void getImgFiles()
    {
        if(Directory.Exists(imgFolderPath))
        {
            
            imgRelativePaths = Directory.GetFiles(imgFolderPath)
                                    .Select(path => "images/user_selections/" + Path.GetFileName(path))
                                    .ToList();
            foreach(var names in imgRelativePaths)
            {
                Console.WriteLine(names);
            }
        }
        else
        {
            Console.WriteLine("FAIL : getImgFiles");
        }
    }

    private async Task getCMDs()
    {
        if(File.Exists(Cmd_filePath))
        {
            string json = File.ReadAllText(Cmd_filePath);
            cmdDict = JObject.Parse(json);

            @* var json = await File.ReadAllTextAsync(Cmd_filePath);
            cmdDict = JsonSerializer.Deserialize<Dictionary<string, object>>(json);

            var jsonString = JsonSerializer.Serialize(cmdDict, new JsonSerializerOptions { WriteIndented = true });
            Console.WriteLine(jsonString); *@

        }
    }
    #endregion Common_Variables_and_Functions


    #region INFO_CARD_Variables_and_Functions
    private INFO_SETTING_STAGE INFO_setting_stage = INFO_SETTING_STAGE.ADD_ROW_STAGE;
    private string title;
    private INFO_DataItem currentEdit_INFO_DataItem_ref; //reference, modify in memory
    private INFO_DataItem temp_INFO_DataItem_Backend;
    private INFO_DataFormat currentEdit_INFO_DataFormat_ref; //This is point to the one DataFormat of temp_INFO_DataItem_Backend.INFO_DataFormats
    private string edit_CardName;
    private bool showMenu = false;
    private double menuX;
    private double menuY;
    private int InfoData_index; //紀錄 InfoDataItem, InfoDataFormat 被選擇到的index，依照Stage而代表不同的index

    private bool ConfirmDialog = false;
    private string AlertMessage = "";
    private Action? ConfirmCallback;

    private List<INFO_DataItem> edit_INFO_DataItems = new List<INFO_DataItem>
    {

    };

    [JSInvokable]
    public void OnShowContextMenu(string table, int index, double x, double y)
    {
        menuX = x;
        menuY = y;
        showMenu = true;
        Console.WriteLine($"[OnShowContextMenu] table : {table}, index : {index}");
        InfoData_index = index;
        StateHasChanged();
    }

    private void ShowDialog(string _message, Action _ConfirmAction)
    {
        AlertMessage = _message;
        ConfirmCallback = _ConfirmAction;
        ConfirmDialog = true;
    }

    private void Confirm()
    {
        ConfirmDialog = false;
        ConfirmCallback?.Invoke();
    }

    private void Cancel()
    {
        ConfirmDialog = false;
    }
    
    private void DeleteAction_In_ADD_ROW_STAGE()
    {
        Console.WriteLine("執行刪除");
        if(InfoData_index >= 0 && InfoData_index < currentCardInfo.Info_DataItems.Count)
        {
            currentCardInfo.Info_DataItems.RemoveAt(InfoData_index);
        }
    }

    private void DeleteAction_In_ADD_VALUE_AND_CMD_ROW_STAGE()
    {
        Console.WriteLine("執行刪除");
        if(InfoData_index >= 0 && InfoData_index < currentEdit_INFO_DataItem_ref.INFO_DataFormats.Count)
        {
            currentEdit_INFO_DataItem_ref.INFO_DataFormats.RemoveAt(InfoData_index);
        }
    }

    private void CloseMenu()
    {
        if(showMenu)
        {
            showMenu = false;
        }
    }

    private void Edit_inCorrespondingStage()
    {
        showMenu = false;
        Console.WriteLine("點了選像1");
        
        switch(INFO_setting_stage)
        {
            case INFO_SETTING_STAGE.ADD_ROW_STAGE:
                var tempINFO_DataItem = edit_INFO_DataItems[InfoData_index];
                AdjustValueCmdRow(tempINFO_DataItem);
                break;
            case INFO_SETTING_STAGE.ADD_VALUE_AND_CMD_ROW_STAGE:
                var tempDataFormat = currentEdit_INFO_DataItem_ref.INFO_DataFormats[InfoData_index];
                setValueAndCmd(tempDataFormat);
                break;
            default:
                break;
        }
    }

    private void Delete_inCorrespondingStage()
    {
        showMenu = false;
        Console.WriteLine("點了選像2");
        
        switch(INFO_setting_stage)
        {
            case INFO_SETTING_STAGE.ADD_ROW_STAGE:
                ShowDialog("確定要刪除?", DeleteAction_In_ADD_ROW_STAGE);
                break;
            case INFO_SETTING_STAGE.ADD_VALUE_AND_CMD_ROW_STAGE:
                Console.WriteLine("[Delete_inCorrespondingStage] Stage = INFO_SETTING_STAGE.ADD_VALUE_AND_CMD_ROW_STAGE");
                ShowDialog("確定要刪除?", DeleteAction_In_ADD_VALUE_AND_CMD_ROW_STAGE);
                break;
            default:
                break;
        }
    }

    private void Add_INFO_DataItem()
    {
        edit_INFO_DataItems.Add(new INFO_DataItem());
    }

    private void selectImg(INFO_DataItem _temp_Info_DataItem)
    {
        currentEdit_INFO_DataItem_ref = _temp_Info_DataItem; 
        INFO_setting_stage = INFO_SETTING_STAGE.SELECT_ICON_STAGE;
    }

    private void selectedImgFile(string _imgPath)
    {
        Console.WriteLine(_imgPath);

        currentEdit_INFO_DataItem_ref.iconPath = _imgPath;
        INFO_setting_stage = INFO_SETTING_STAGE.ADD_ROW_STAGE;
    }

    private void AdjustValueCmdRow(INFO_DataItem _temp_Info_DataItem)
    {
        Console.WriteLine("AdjustValueCmdRow");

        //如果是已經存在的 currentEdit_INFO_DataItem，則

        currentEdit_INFO_DataItem_ref = _temp_Info_DataItem;
        
        INFO_setting_stage = INFO_SETTING_STAGE.ADD_VALUE_AND_CMD_ROW_STAGE;
    }

    private void AddRow_ValueAndCmd()
    {
        currentEdit_INFO_DataItem_ref.INFO_DataFormats.Add(new INFO_DataFormat());
    }

    private void setValueAndCmd(INFO_DataFormat _temp_DataFormat)
    {
        Console.WriteLine("setValueAndCmd");
        currentEdit_INFO_DataFormat_ref = _temp_DataFormat;
        INFO_setting_stage = INFO_SETTING_STAGE.SETTING_VALUE_AND_CMD_STAGE;
    }

    private void selectMachine()
    {
        Console.WriteLine("selectMachine");
        INFO_setting_stage = INFO_SETTING_STAGE.MACHINE_SELECTION_STAGE;
    }

    private void selectCMD()
    {
        Console.WriteLine("selectCMD");
        INFO_setting_stage = INFO_SETTING_STAGE.CMD_SELECTION_STAGE;
    }

    private void selectUnit()
    {
        Console.WriteLine("selectUnit");
        if(!string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Cmd))
        {
            Console.WriteLine("selectUnit : currentEdit_INFO_DataFormat_ref.Cmd = " + currentEdit_INFO_DataFormat_ref.Cmd);
            if(cmdDict.ContainsKey(currentEdit_INFO_DataFormat_ref.Cmd))
            {
                var unitToken = cmdDict[currentEdit_INFO_DataFormat_ref.Cmd]["Unit"];
                if(unitToken != null)
                {
                    UnitLists = cmdDict[currentEdit_INFO_DataFormat_ref.Cmd]["Unit"].ToObject<List<string>>();
                }
            }
            INFO_setting_stage = INFO_SETTING_STAGE.UNIT_SELECTION_STAGE;
        }
        else
        {
            Console.WriteLine("selectUnit : 尚未選擇CMD (這邊可以跳個Alert框)");
        }
    }

    private void clickMachineName(string _selectedMachineName)
    {
        currentEdit_INFO_DataFormat_ref.MachineName = _selectedMachineName;
        INFO_setting_stage = INFO_SETTING_STAGE.SETTING_VALUE_AND_CMD_STAGE;
    }
    private void clickCmd(string _cmd)
    {
        if(currentEdit_INFO_DataFormat_ref.Cmd != _cmd)
        {
            currentEdit_INFO_DataFormat_ref.Cmd = _cmd;
            currentEdit_INFO_DataFormat_ref.Unit = "";
        }
        

        INFO_setting_stage = INFO_SETTING_STAGE.SETTING_VALUE_AND_CMD_STAGE;
    }
    private void clickUnit(string _unit)
    {
        currentEdit_INFO_DataFormat_ref.Unit = _unit;
        INFO_setting_stage = INFO_SETTING_STAGE.SETTING_VALUE_AND_CMD_STAGE;
    }

    private void confirm_INFO_DataFormat_ValueSetting()
    {
        if( string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.MachineName)      ||
            string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Cmd)              ||
            string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.ValueName)        ||
            string.IsNullOrEmpty(currentEdit_INFO_DataFormat_ref.Unit)             ) 
        {
            Console.WriteLine("有數值沒有設定");
            return;
        }
        
        Console.WriteLine("[currentEdit_INFO_DataItem_ref] :");
        string json = JsonSerializer.Serialize(currentEdit_INFO_DataItem_ref, new JsonSerializerOptions{
            WriteIndented = true
        });
        Console.WriteLine(json);


        INFO_setting_stage = INFO_SETTING_STAGE.ADD_VALUE_AND_CMD_ROW_STAGE;
    }
    
    private void confirm_INFO_DataFormats_Setting()
    {
        currentEdit_INFO_DataItem_ref.status = SettingStatus.DONE;
        INFO_setting_stage = INFO_SETTING_STAGE.ADD_ROW_STAGE;
    }

    private void Confirm_INFO_DataItem()
    {
        Console.WriteLine("[edit_INFO_DataItems] : ");
        string json = JsonSerializer.Serialize(edit_INFO_DataItems, new JsonSerializerOptions{
            WriteIndented = true
        });
        Console.WriteLine(json);
    
        currentCardInfo.cardName = edit_CardName;
        currentCardInfo.Info_DataItems = edit_INFO_DataItems;
        
        // 通知父元件更新 currentCardInfo
        OnCardInfoUpdated.InvokeAsync(currentCardInfo);
    }

    #endregion INFO_CARD_Variables_and_Functions
    

    #region LINK_STATUS_Variables_and_Functions
    private STATUS_SETTING_STAGE STATUS_setting_stage = STATUS_SETTING_STAGE.OVERVIEW;
    private LINK_STATUS_Pair currentEdit_LINK_STATUS_pair_ref;
    private List<LINK_STATUS_Pair> edit_Link_STATUS_Pairs = new List<LINK_STATUS_Pair>
    {

    };

    private void selectImg_LINK_STATUS(LINK_STATUS_Pair _temp_LINK_STATUS_Pair)
    {
        currentEdit_LINK_STATUS_pair_ref = _temp_LINK_STATUS_Pair;
        STATUS_setting_stage = STATUS_SETTING_STAGE.SELECT_ICON_STAGE;
    }

    private void selectedImgFile_LINK_STATUS(string _imgPath)
    {
        Console.WriteLine(_imgPath);
        currentEdit_LINK_STATUS_pair_ref.iconPath = _imgPath;
        STATUS_setting_stage = STATUS_SETTING_STAGE.OVERVIEW;
    }

    private void Confirm_LINK_STATUS()
    {
        Console.WriteLine("[edit_INFO_DataItems] : ");
        string json = JsonSerializer.Serialize(edit_INFO_DataItems, new JsonSerializerOptions{
            WriteIndented = true
        });
        Console.WriteLine(json);
        
        currentCardInfo.Link_STATUS_Pairs = edit_Link_STATUS_Pairs;

        OnCardInfoUpdated.InvokeAsync(currentCardInfo);
    }
    #endregion LINK_STATUS_Variables_and_Functions

    #region CHART_Variables_and_Functions
    private CHART_SETTING_STAGE CHART_setting_stage = CHART_SETTING_STAGE.OVERVIEW;
    private CHART_SETTING edit_ChartSetting = new CHART_SETTING();
    private void SetCMD_CHART()
    {
        CHART_setting_stage = CHART_SETTING_STAGE.SELECT_CMD_STAGE;
    }
    private void ChartDetailSubmit()
    {

    }
    private void ToggleDropdown_CHART()
    {

    }

    private void clickCmd_CHART(string _selected_Cmd)
    {

    }
    #endregion CHART_Variables_and_Functions
    
}