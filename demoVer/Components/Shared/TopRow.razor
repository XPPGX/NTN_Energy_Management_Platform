@namespace demoVer.Shared
@inject IJSRuntime JS
@using System.Net.Sockets
@rendermode InteractiveServer
@inject NavigationManager NavManager

<div class="top-row">
    <div class="left-items">
        <button class="btn" @onclick="toggleMenu">
            <!-- <i class="fas fa-th-large"></i> -->
            <img src="images/shapes.png" alt="menu" style="width:24px; height:24px"/>
        </button>
        <button class="btn @(showEditBtn_Flag ? "editing-mode" : "")" @onclick="showEditButtons">
            <img src="images/pen.png" alt="edit" style="width:24px; height:24px"/>
        </button>
        @if(menuOpen)
        {
            <div class="dropdown-menu">
                <button class="nav-link" @onclick="GoTo_NTN_HOME">NTN首頁</button>
                <button class="nav-link expandable" @onclick="Toggle_expand_sys_setting">系統設定</button>
                @if(expand_sys_setting)
                {
                    <div class="sub-menu">
                        <button class="nav-link" @onclick="GoTo_Battery_setting">電池設定</button>
                        <button class="nav-link" @onclick="GoTo_Inverter_setting">INV設定</button>
                    </div>
                }
                <button class="nav-link expandable" @onclick="Toggle_expand_management">機型管理</button>
                @if(expand_management)
                {
                    <div class="sub-menu">
                        <button class="nav-link" @onclick="GoTo_Link_status">連線狀態</button>
                        <button class="nav-link" @onclick="GoTo_Data_log">監測報告</button>
                    </div>
                }
                <button class="nav-link" @onclick="GoTo_Use_strategy">用電策略</button>
            </div>
        }
        <div class="current-tab">
            
        </div>
    </div>

    <div class="right-items">
        @if(afterFirstRender_Flag)
        {
            if(showEditBtn_Flag)
            {
                //show "+" button
                <button class="btn" @onclick="saveCardsInfo">
                    <img src="images/save-as.png" alt="save-edit" style="width:24px; height:24px"/>
                </button>
                <button class="btn" @onclick="showAddCard">
                    <img src="images/plus.png" alt="plus" style="width:24px; height:24px"/>
                </button>
            }
            if(!isMobile)
            {
                <div class="current_page_label">
                    <div>@currentPage</div>
                </div>
            }
        }
        <button class="btn" @onclick="GoTo_Framework">
            <img src="images/logo.png" alt="logo" style="width:36px; height:24px"/>
        </button>
    </div>
</div>


@code{

    private bool isMobile;
    private bool afterFirstRender_Flag = false;
    private bool menuOpen = false;
    private bool expand_sys_setting = false;
    private bool expand_management = false;

    private string currentPage;
    private string currentRoute = "test";


    private bool showEditBtn_Flag = false;
    private bool showAddBtn_Flag = false;


    [Parameter] public EventCallback<bool> OnSendToParent {get; set;}
    [Parameter] public EventCallback InformParentTo_OpenAddCard {get; set;}
    [Parameter] public EventCallback InformParentTo_SaveCardsInfo {get; set;}
    
    private async Task showEditButtons()
    {
        showEditBtn_Flag = !showEditBtn_Flag;
        await OnSendToParent.InvokeAsync(showEditBtn_Flag);
    }

    private async Task showAddCard()
    {
        await InformParentTo_OpenAddCard.InvokeAsync();
    }

    private async Task saveCardsInfo()
    {
        await InformParentTo_SaveCardsInfo.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            afterFirstRender_Flag = true;
            isMobile = await JS.InvokeAsync<bool>("checkIsMobile");
            StateHasChanged(); // 讓頁面更新
        }
    }

    private void toggleMenu()
    {
        menuOpen = !menuOpen;
    }
    
    private void Toggle_expand_management()
    {
        expand_management = !expand_management;
    }

    private void Toggle_expand_sys_setting()
    {
        expand_sys_setting = !expand_sys_setting;
    }

    
    private void GoTo_NTN_HOME()
    {
        NavManager.NavigateTo("/");
    }

    private void GoTo_Battery_setting()
    {
        NavManager.NavigateTo("/Battery_setting");
    }

    private void GoTo_Inverter_setting()
    {
        NavManager.NavigateTo("/Inverter_setting");
    }

    private void GoTo_Link_status()
    {
        NavManager.NavigateTo("/Link_status");
    }

    private void GoTo_Data_log()
    {
        NavManager.NavigateTo("/Data_log");
    }

    private void GoTo_Use_strategy()
    {
        NavManager.NavigateTo("/Use_strategy");
    }

    protected override void OnInitialized()
    {
        //update the label at the first
        UpdatePageLabel();

        //register the nav
        NavManager.LocationChanged += OnLocationChanged;
    }

    private async Task GoTo_Framework()
    {
        await JS.InvokeVoidAsync("jumpToApp", 5039);
    }

    private bool IsPortInUse(string host, int port)
	{
		try
		{
			using var client = new TcpClient();
			var result = client.BeginConnect(host, port, null, null);
			return result.AsyncWaitHandle.WaitOne(TimeSpan.FromMilliseconds(300)) && client.Connected;
		}
		catch
		{
			return false;
		}
	}

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdatePageLabel();
        StateHasChanged();
    }

    private void UpdatePageLabel()
    {
        //collapse all the menu when switching to other pages
        menuOpen = false;
        expand_sys_setting = false;
        expand_management = false;

        currentRoute = NavManager.ToBaseRelativePath(NavManager.Uri);
        Console.WriteLine($"{currentRoute}");
        switch(currentRoute)
        {
            case "":
                currentPage = "NTN Home";
                Console.WriteLine("App started1");
                break;

            case "Battery_setting":
                break;

            case "Inverter_setting":
                break;

            case "Link_status":
                break;

            case "Data_log":
                break;

            case "Use_strategy":
                currentPage = "Use strategy";
                break;

            default:
                currentPage = "Unknown Page";
                break;
        }
    }

    public void HideMenu()
    {
        if(menuOpen == false)
        {
            return;
        }
        
        menuOpen = false;
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
    }
}