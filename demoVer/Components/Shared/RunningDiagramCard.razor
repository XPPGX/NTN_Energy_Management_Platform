@namespace demoVer.Shared
@inherits LayoutComponentBase
<div class="running-diagram-container @CssClass" @attributes="AdditionalAttributes">
    <div class="running-diagram-container top">
        <div class="leftPart">
            連接狀態：
            <div id="link_status">已連接</div>
        </div>
        <div class="rightPart">
            運行模式：
            <div id="running_mode">ByPass</div>
        </div>
        @if(showEditButton)
        {
            <button class="top-right-button">⋯</button>
        }
    </div>
    <div class="running-diagram-container bottom">
        <div class="grid-container" @ref="grid_container">
            <!-- 第一列 -->
            <div class="grid-item">
                <img src="images/transmission-tower.png" alt="Transmission Tower" style="width:48px; height:48px" @ref="tower"/>
            </div>
            <div class="placeholder">
                @if (triGroup1.get_showArrowFlag())
                {
                    <div class="arrows-container">
                        @for (int i = 0; i < 3; i++)
                        {
                            var cssClass = i == triGroup1.activeIndex ? "triangle active" : "triangle";
                            <div class="@cssClass"></div>
                        }
                    </div>
                }
            </div>
            <div class="grid-item">
                <img src="images/fridge.png" alt="NTN" style="width:48px; height:48px" @ref="NTN"/>
            </div>
            <div class="placeholder">
                @if (triGroup2.get_showArrowFlag())
                {
                    <div class="arrows-container">
                        @for (int i = 0; i < 3; i++)
                        {
                            var cssClass = i == triGroup2.activeIndex ? "triangle active" : "triangle";
                            <div class="@cssClass"></div>
                        }
                    </div>
                }
            </div>
            <div class="grid-item">
                <img src="images/charge.png" alt="load" style="width:48px; height:48px" @ref="load"/>
            </div>
            <!-- 第二列 -->
            <div class="placeholder"></div>
            <div class="placeholder"></div>
            <div class="placeholder">
                @if (triGroup3.get_showArrowFlag())
                {
                    <div class="arrows-container-downward">
                        @for (int i = 0; i < 3; i++)
                        {
                            var cssClass = i == triGroup3.activeIndex ? "triangle-downward active" : "triangle-downward";
                            <div class="@cssClass"></div>
                        }
                    </div>
                }
            </div>
            <div class="placeholder"></div>
            <div class="placeholder"></div>

            <!-- 第三列 -->
            <div class="placeholder"></div>
            <div class="placeholder"></div>
            <div class="grid-item">
                <img src="images/car-battery.png" alt="battery" style="width:48px; height:48px" @ref="battery"/>
            </div>
            <div class="placeholder"></div>
            <div class="placeholder"></div>
            
        </div>
        
    </div>
</div>

@code{
    [Parameter] public string CssClass {get; set; }
    [Parameter(CaptureUnmatchedValues  = true)] public Dictionary<string, object> AdditionalAttributes {get; set; }
    [Parameter] public bool showEditButton {get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            //[Debug] show arrow animation
            //await UpdateArrowPosition();
            //StartTimer();
        }
    }

    #region arrowAnimation
    protected ElementReference leftRef;
    protected ElementReference rightRef;
    
    protected ElementReference tower;
    protected ElementReference NTN;
    protected ElementReference load;
    protected ElementReference battery;
    protected ElementReference grid_container;

    protected int arrowLeft;
    protected int arrowTop;
    protected int activeIndex = 0;
    protected bool showArrows = false;

    protected class triangle_group
    {
        public int arrowLeft;
        public int arrowTop;
        public int activeIndex;
        public bool showArrows;
        public bool position_OK;

        public triangle_group()
        {
            this.activeIndex = 0;
            this.showArrows = false;
            this.position_OK = false;
        }
        public void set_triGroup_postion(int left, int top)
        {
            this.arrowLeft = left;
            this.arrowTop = top;
            this.position_OK = true;
        }
        public void show_arrows()
        {
            if(this.position_OK){
                this.showArrows = true;
            }
        }
        public void clear_arrows()
        {
            this.showArrows = false;
        }
        public bool get_showArrowFlag()
        {
            return this.showArrows;
        }
        public int get_arrowLeft()
        {
            return this.arrowLeft;
        }
        public int get_arrowTop()
        {
            return this.arrowTop;
        }
        public string GetTriGroupStyle()
        {
            return $"left:{this.get_arrowLeft()}px; top:{this.get_arrowTop()}px;";
        }
    }

    protected triangle_group triGroup1 = new triangle_group();
    protected triangle_group triGroup2 = new triangle_group();
    protected triangle_group triGroup3 = new triangle_group();

    protected System.Threading.Timer? timer;

    [Inject] protected IJSRuntime JS {get; set; } = default;

    // DomRect 物件用來接 JS 回傳的資料
    protected class DomRect
    {
        public double Bottom { get; set; }
        public double Height { get; set; }
        public double Left { get; set; }
        public double Right { get; set; }
        public double Top { get; set; }
        public double Width { get; set; }
    }

    protected async Task UpdateArrowPosition()
    {
        var leftRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", tower, grid_container);
        var rightRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", NTN, grid_container);
        arrowLeft = (int)((leftRect.Right + rightRect.Left) / 2) - 8; //if no "-8", the first triangle will appear at middle
        arrowTop = (int)((leftRect.Top + rightRect.Top) / 2);
        Console.WriteLine($"left : {arrowLeft}, top : {arrowTop}");
        triGroup1.set_triGroup_postion(arrowLeft, arrowTop);
        triGroup1.show_arrows();


        leftRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", NTN, grid_container);
        rightRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", load, grid_container);
        arrowLeft = (int)((leftRect.Right + rightRect.Left) / 2);
        arrowTop = (int)((leftRect.Top + rightRect.Top) / 2);
        triGroup2.set_triGroup_postion(arrowLeft, arrowTop);
        triGroup2.show_arrows();


        leftRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", NTN, grid_container);
        rightRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", battery, grid_container);
        arrowLeft = (int)((leftRect.Right + rightRect.Left) / 2);
        arrowTop = (int)((leftRect.Top + rightRect.Top) / 2);
        triGroup3.set_triGroup_postion(arrowLeft, arrowTop);
        triGroup3.show_arrows();
    }

    protected void StartTimer()
    {
        timer = new System.Threading.Timer(_ =>
        {   
            Console.WriteLine("timer");
            if(triGroup1.get_showArrowFlag() || triGroup2.get_showArrowFlag() || triGroup3.get_showArrowFlag())
            {
                if(triGroup1.get_showArrowFlag())
                {
                    triGroup1.activeIndex = (triGroup1.activeIndex + 1) % 3;
                    Console.WriteLine("group1.index : " + triGroup1.activeIndex);
                }
                if(triGroup2.get_showArrowFlag())
                {
                    triGroup2.activeIndex = (triGroup2.activeIndex + 1) % 3;
                    Console.WriteLine("group2.index : " + triGroup2.activeIndex);
                }
                if(triGroup3.get_showArrowFlag())
                {
                    triGroup3.activeIndex = (triGroup3.activeIndex + 1) % 3;
                    Console.WriteLine("group3.index : " + triGroup3.activeIndex);
                }
                InvokeAsync(StateHasChanged);
            }
        }, null, 0, 1000);
    }
    public void Dispose()
    {
        timer?.Dispose();
    }
    #endregion //arrowAnimation
}