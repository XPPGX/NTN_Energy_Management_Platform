@namespace demoVer.Shared
@inherits LayoutComponentBase
@using demoVer.Models
@using demoVer.Services
@inject ArrowAnimationService ArrowService

<div class="running-diagram-container @CssClass" @attributes="AdditionalAttributes">
    <div class="running-diagram-container top">
        <div class="leftPart">
            連接狀態：
            <div id="link_status">已連接</div>
        </div>
        <div class="rightPart">
            運行模式：
            <div id="running_mode">ByPass</div>
        </div>
        @if(showEditButton)
        {
            <MudButton Variant="Variant.Text"
                    Style="position: absolute; top: 4px; right: 4px; padding: 4px 8px; font-size: 16px; z-index: 999;"
                    OnClick="openEditMenu"
                    Class="custom-top-right-button"
                    Color="Color.Default">
                <MudIcon Icon="@Icons.Material.Filled.MoreHoriz" />
            </MudButton>
        }
    </div>
    <div class="running-diagram-container bottom">
        <div class="grid-container" @ref="grid_container">
            <!-- 第一列 -->
            <div class="grid-col">
                <div class="grid-item">
                    <img src="@currentCard.Link_STATUS_Pairs[0].iconPath" alt="Transmission Tower" style="width:48px; height:48px" @ref="tower"/>
                </div>
                <div class="grid-label">@currentCard.Link_STATUS_Pairs[0].Label</div>
            </div>
            <div class="grid-col">
                <div class="placeholder">
                    @if (ArrowService.triGroup1.get_showArrowFlag())
                    {
                        <div class="arrows-container">
                            @for (int i = 0; i < 3; i++)
                            {
                                var cssClass = i == ArrowService.triGroup1.activeIndex ? "triangle active" : "triangle";
                                <div class="@cssClass"></div>
                            }
                        </div>
                    }
                </div>
                <div class="grid-label"></div>
            </div>
            <div class="grid-col">
                <div class="grid-item">
                    <img src="@currentCard.Link_STATUS_Pairs[1].iconPath" alt="NTN" style="width:48px; height:48px" @ref="NTN"/>
                </div>
                <div class="grid-label">@currentCard.Link_STATUS_Pairs[1].Label</div>
            </div>
            <div class="grid-col">
                <div class="placeholder">
                    @if (ArrowService.triGroup2.get_showArrowFlag())
                    {
                        <div class="arrows-container">
                            @for (int i = 0; i < 3; i++)
                            {
                                var cssClass = i == ArrowService.triGroup2.activeIndex ? "triangle active" : "triangle";
                                <div class="@cssClass"></div>
                            }
                        </div>
                    }
                </div>
                <div class="grid-label"></div>
            </div>
            <div class="grid-col">
                <div class="grid-item">
                    <img src="@currentCard.Link_STATUS_Pairs[2].iconPath" alt="load" style="width:48px; height:48px" @ref="load"/>
                </div>
                <div class="grid-label">@currentCard.Link_STATUS_Pairs[2].Label</div>
            </div>
            
            <!-- 第二列 -->
            <div class="placeholder"></div>
            <div class="placeholder"></div>
            <div class="grid-col">
                <div class="placeholder">
                    @if (ArrowService.triGroup3.get_showArrowFlag())
                    {
                        <div class="arrows-container-downward">
                            @for (int i = 0; i < 3; i++)
                            {
                                var cssClass = i == ArrowService.triGroup3.activeIndex ? "triangle-downward active" : "triangle-downward";
                                <div class="@cssClass"></div>
                            }
                        </div>
                    }
                </div>
            </div>
            <div class="placeholder"></div>
            <div class="placeholder"></div>

            <!-- 第三列 -->
            <div class="placeholder"></div>
            <div class="placeholder"></div>
            <div class="grid-col">
                <div class="grid-item">
                    <img src="@currentCard.Link_STATUS_Pairs[3].iconPath" alt="battery" style="width:48px; height:48px" @ref="battery"/>
                </div>
                <div class="grid-label">@currentCard.Link_STATUS_Pairs[3].Label</div>
            </div>
            
            <div class="placeholder"></div>
            <div class="placeholder"></div>
            
        </div>
        
    </div>
</div>

@code{
    private bool DEBUG_MODE = true;
    
    [Parameter] public string CssClass {get; set; }
    [Parameter(CaptureUnmatchedValues  = true)] public Dictionary<string, object> AdditionalAttributes {get; set; }
    [Parameter] public bool showEditButton {get; set; }
    [Parameter] public EventCallback<string> Inform_Home_openEditMenu {get; set;}
    [Parameter] public CardInfo currentCard {get; set;}

    private bool stopTimer_Flag = false;

    private void Log(string message)
    {
        if(DEBUG_MODE)
        {
            Console.WriteLine($"[Debug] {message}");
        }
    }

    private async Task openEditMenu()
    {
        if(Inform_Home_openEditMenu.HasDelegate)
        {
            //Pass the razor component name to HOME, the name can be found definition in the HOME CardInfos List.
            await Inform_Home_openEditMenu.InvokeAsync(currentCard.ID);
        }
    }

    protected override void OnInitialized()
    {
        if(currentCard.Link_STATUS_Pairs == null)
        {
            currentCard.Link_STATUS_Pairs = new List<LINK_STATUS_Pair>
            {
                new LINK_STATUS_Pair { iconPath = "images/user_selections/transmission-tower.png", Label = "" },
                new LINK_STATUS_Pair { iconPath = "images/user_selections/fridge.png", Label = "" },
                new LINK_STATUS_Pair { iconPath = "images/user_selections/plug.png", Label = "" },
                new LINK_STATUS_Pair { iconPath = "images/user_selections/car-battery.png", Label = "" }
            };
        }
    }


    protected override async Task OnInitializedAsync()
    {
        ArrowService.OnTick += OnArrowTick;
    }

    private void OnArrowTick()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            //[Debug] show arrow animation
            await UpdateArrowPosition();
        }
    }

    #region arrowAnimation
    protected ElementReference leftRef;
    protected ElementReference rightRef;
    
    protected ElementReference tower;
    protected ElementReference NTN;
    protected ElementReference load;
    protected ElementReference battery;
    protected ElementReference grid_container;

    protected int arrowLeft;
    protected int arrowTop;
    protected int activeIndex = 0;
    protected bool showArrows = false;

    protected System.Threading.Timer? timer;

    [Inject] protected IJSRuntime JS {get; set; } = default;

    // DomRect 物件用來接 JS 回傳的資料
    protected class DomRect
    {
        public double Bottom { get; set; }
        public double Height { get; set; }
        public double Left { get; set; }
        public double Right { get; set; }
        public double Top { get; set; }
        public double Width { get; set; }
    }

    protected async Task UpdateArrowPosition()
    {
        var leftRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", tower, grid_container);
        var rightRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", NTN, grid_container);
        arrowLeft = (int)((leftRect.Right + rightRect.Left) / 2) - 8; //if no "-8", the first triangle will appear at middle
        arrowTop = (int)((leftRect.Top + rightRect.Top) / 2);
        ArrowService.triGroup1.set_triGroup_postion(arrowLeft, arrowTop);
        ArrowService.triGroup1.show_arrows();


        leftRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", NTN, grid_container);
        rightRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", load, grid_container);
        arrowLeft = (int)((leftRect.Right + rightRect.Left) / 2);
        arrowTop = (int)((leftRect.Top + rightRect.Top) / 2);
        ArrowService.triGroup2.set_triGroup_postion(arrowLeft, arrowTop);
        ArrowService.triGroup2.show_arrows();


        leftRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", NTN, grid_container);
        rightRect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", battery, grid_container);
        arrowLeft = (int)((leftRect.Right + rightRect.Left) / 2);
        arrowTop = (int)((leftRect.Top + rightRect.Top) / 2);
        ArrowService.triGroup3.set_triGroup_postion(arrowLeft, arrowTop);
        ArrowService.triGroup3.show_arrows();
    }

    public void Dispose()
    {
        ArrowService.OnTick -= OnArrowTick;
    }
    #endregion //arrowAnimation
}